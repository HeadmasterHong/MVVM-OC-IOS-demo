//
//  LightArtParser.m
//  LightArt
//
//  Created by 彭利章 on 2018/3/19.
//

#import "LightArtParser.h"
#import <JavaScriptCore/JavaScriptCore.h>

static NSString *stBase64Script = @"KGZ1bmN0aW9uKCkgewogIHZhciAkY29udGV4dCA9IHRoaXM7CiAgdmFyIHJvb3Q7IC8vIHJvb3QgY29udGV4dAogIHZhciBIZWxwZXIgPSB7CiAgICBpc190ZW1wbGF0ZTogZnVuY3Rpb24oc3RyKSB7CiAgICAgIHZhciByZSA9IC9ce1x7KC4rKVx9XH0vZzsKICAgICAgcmV0dXJuIHJlLnRlc3Qoc3RyKTsKICAgIH0sCiAgICBpc19hcnJheTogZnVuY3Rpb24oaXRlbSkgewogICAgICByZXR1cm4gKAogICAgICAgIEFycmF5LmlzQXJyYXkoaXRlbSkgfHwKICAgICAgICAoISFpdGVtICYmCiAgICAgICAgICB0eXBlb2YgaXRlbSA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIGl0ZW0ubGVuZ3RoID09PSAnbnVtYmVyJyAmJgogICAgICAgICAgKGl0ZW0ubGVuZ3RoID09PSAwIHx8IChpdGVtLmxlbmd0aCA+IDAgJiYgKGl0ZW0ubGVuZ3RoIC0gMSkgaW4gaXRlbSkpCiAgICAgICAgKQogICAgICApOwogICAgfSwKICAgIHJlc29sdmU6IGZ1bmN0aW9uKG8sIHBhdGgsIG5ld192YWwpIHsKICAgICAgLy8gMS4gVGFrZXMgYW55IG9iamVjdAogICAgICAvLyAyLiBGaW5kcyBzdWJ0cmVlIGJhc2VkIG9uIHBhdGgKICAgICAgLy8gMy4gU2V0cyB0aGUgdmFsdWUgdG8gbmV3X3ZhbAogICAgICAvLyA0LiBSZXR1cm5zIHRoZSBvYmplY3Q7CiAgICAgIGlmIChwYXRoICYmIHBhdGgubGVuZ3RoID4gMCkgewogICAgICAgIHZhciBmdW5jID0gRnVuY3Rpb24oJ25ld192YWwnLCAnd2l0aCh0aGlzKSB7dGhpcycgKyBwYXRoICsgJz1uZXdfdmFsOyByZXR1cm4gdGhpczt9JykuYmluZChvKTsKICAgICAgICByZXR1cm4gZnVuYyhuZXdfdmFsKTsKICAgICAgfSBlbHNlIHsKICAgICAgICBvID0gbmV3X3ZhbDsKICAgICAgICByZXR1cm4gbzsKICAgICAgfQogICAgfSwKICB9OwogIHZhciBDb25kaXRpb25hbCA9IHsKICAgIHJ1bjogZnVuY3Rpb24odGVtcGxhdGUsIGRhdGEpIHsKICAgICAgLy8gZXhwZWN0aW5nIHRlbXBsYXRlIGFzIGFuIGFycmF5IG9mIG9iamVjdHMsCiAgICAgIC8vIGVhY2ggb2Ygd2hpY2ggY29udGFpbnMgJyNpZicsICcjZWxzZWlmJywgJ2Vsc2UnIGFzIGtleQoKICAgICAgLy8gaXRlbSBzaG91bGQgYmUgaW4gdGhlIGZvcm1hdCBvZjoKICAgICAgLy8geycjaWYgaXRlbSc6ICdibGFoYmxhaCd9CgogICAgICAvLyBTdGVwIDEuIGdldCBhbGwgdGhlIGNvbmRpdGlvbmFsIGtleXMgb2YgdGhlIHRlbXBsYXRlIGZpcnN0LgogICAgICAvLyBTdGVwIDIuIHRoZW4gdHJ5IGV2YWx1YXRpbmcgb25lIGJ5IG9uZSB1bnRpbCBzb21ldGhpbmcgcmV0dXJucyB0cnVlCiAgICAgIC8vIFN0ZXAgMy4gaWYgaXQgcmVhY2hlcyB0aGUgZW5kLCB0aGUgbGFzdCBpdGVtIHNoYWxsIGJlIHJldHVybmVkCiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGVtcGxhdGUubGVuZ3RoOyBpKyspIHsKICAgICAgICB2YXIgaXRlbSA9IHRlbXBsYXRlW2ldOwogICAgICAgIHZhciBrZXlzID0gT2JqZWN0LmtleXMoaXRlbSk7CiAgICAgICAgLy8gYXNzdW1pbmcgdGhhdCB0aGVyZSdzIG9ubHkgYSBzaW5nbGUga3YgcGFpciBmb3IgZWFjaCBpdGVtCiAgICAgICAgdmFyIGtleSA9IGtleXNbMF07CiAgICAgICAgdmFyIGZ1bmMgPSBUUkFOU0ZPUk0udG9rZW5pemUoa2V5KTsKICAgICAgICBpZiAoZnVuYy5uYW1lID09PSAnI2lmJyB8fCBmdW5jLm5hbWUgPT09ICcjZWxzZWlmJykgewogICAgICAgICAgdmFyIGV4cHJlc3Npb24gPSBmdW5jLmV4cHJlc3Npb247CiAgICAgICAgICB2YXIgcmVzID0gVFJBTlNGT1JNLmZpbGxvdXQoZGF0YSwgJ3t7JyArIGV4cHJlc3Npb24gKyAnfX0nKTsKICAgICAgICAgIGlmIChyZXMgPT09ICgne3snICsgZXhwcmVzc2lvbiArICd9fScpKSB7CiAgICAgICAgICAgIC8vIGlmIHRoZXJlIHdhcyBhdCBsZWFzdCBvbmUgaXRlbSB0aGF0IHdhcyBub3QgZXZhbHVhdGFibGUsCiAgICAgICAgICAgIC8vIHdlIGhhbHQgcGFyc2luZyBhbmQgcmV0dXJuIHRoZSB0ZW1wbGF0ZTsKICAgICAgICAgICAgcmV0dXJuIHRlbXBsYXRlOwogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgaWYgKHJlcykgewogICAgICAgICAgICAgIC8vIHJ1biB0aGUgY3VycmVudCBvbmUgYW5kIHJldHVybgogICAgICAgICAgICAgIHJldHVybiBUUkFOU0ZPUk0ucnVuKGl0ZW1ba2V5XSwgZGF0YSk7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgLy8gcmVzIHdhcyBmYWxzeS4gSWdub3JlIHRoaXMgYnJhbmNoIGFuZCBnbyBvbiB0byB0aGUgbmV4dCBpdGVtCiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9IGVsc2UgewogICAgICAgICAgLy8gI2Vsc2UKICAgICAgICAgIC8vIGlmIHlvdSByZWFjaGVkIHRoaXMgcG9pbnQsIGl0IG1lYW5zOgogICAgICAgICAgLy8gIDEuIHRoZXJlIHdlcmUgbm8gbm9uLWV2YWx1YXRhYmxlIGV4cHJlc3Npb25zCiAgICAgICAgICAvLyAgMi4gWWV0IGFsbCBwcmVjZWRpbmcgZXhwcmVzc2lvbnMgZXZhbHVhdGVkIHRvIGZhbHN5IHZhbHVlCiAgICAgICAgICAvLyAgVGhlcmVmb3JlIHdlIHJ1biB0aGlzIGJyYW5jaAogICAgICAgICAgcmV0dXJuIFRSQU5TRk9STS5ydW4oaXRlbVtrZXldLCBkYXRhKTsKICAgICAgICB9CiAgICAgIH0KICAgICAgLy8gaWYgeW91J3ZlIHJlYWNoZWQgdGhpcyBwb2ludCwgaXQgbWVhbnMgbm90aGluZyBtYXRjaGVkLgogICAgICAvLyBzbyByZXR1cm4gbnVsbAogICAgICByZXR1cm4gbnVsbDsKICAgIH0sCiAgICBpczogZnVuY3Rpb24odGVtcGxhdGUpIHsKICAgICAgLy8gVFJVRSBPTkxZIElGIGl0J3MgaW4gYSBjb3JyZWN0IGZvcm1hdC4KICAgICAgLy8gT3RoZXJ3aXNlIHJldHVybiB0aGUgb3JpZ2luYWwgdGVtcGxhdGUKICAgICAgLy8gQ29uZGl0aW9uIDAuIE11c3QgYmUgYW4gYXJyYXkKICAgICAgLy8gQ29uZGl0aW9uIDEuIE11c3QgaGF2ZSBhdCBsZWFzdCBvbmUgaXRlbQogICAgICAvLyBDb25kaXRpb24gMi4gRWFjaCBpdGVtIGluIHRoZSBhcnJheSBzaG91bGQgYmUgYW4gb2JqZWN0IG9mIGEgc2luZ2xlIGtleS92YWx1ZSBwYWlyCiAgICAgIC8vIENvbmRpdGlvbiAzLiBzdGFydHMgd2l0aCAjaWYKICAgICAgLy8gQ29uZGl0aW9uIDQuIGluIGNhc2UgdGhlcmUncyBtb3JlIHRoYW4gdHdvIGl0ZW1zLCBldmVyeXRoaW5nIGJldHdlZW4gdGhlIGZpcnN0IGFuZCB0aGUgbGFzdCBpdGVtIHNob3VsZCBiZSAjZWxzZWlmCiAgICAgIC8vIENvbmRpdGlvbiA1LiBpbiBjYXNlIHRoZXJlJ3MgbW9yZSB0aGFuIHR3byBpdGVtcywgdGhlIGxhc3Qgb25lIHNob3VsZCBiZSBlaXRoZXIgJyNlbHNlJyBvciAnI2Vsc2VpZicKICAgICAgaWYgKCFIZWxwZXIuaXNfYXJyYXkodGVtcGxhdGUpKSB7CiAgICAgICAgLy8gQ29uZGl0aW9uIDAsIGl0IG5lZWRzIHRvIGJlIGFuIGFycmF5IHRvIGJlIGEgY29uZGl0aW9uYWwKICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgIH0KICAgICAgLy8gQ29uZGl0aW9uIDEuCiAgICAgIC8vIE11c3QgaGF2ZSBhdCBsZWFzdCBvbmUgaXRlbQogICAgICBpZiAodGVtcGxhdGUubGVuZ3RoID09PSAwKSB7CiAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICB9CiAgICAgIC8vIENvbmRpdGlvbiAyLgogICAgICAvLyBFYWNoIGl0ZW0gaW4gdGhlIGFycmF5IHNob3VsZCBiZSBhbiBvYmplY3QKICAgICAgLy8gLCBhbmQgIG9mIGEgc2luZ2xlIGtleS92YWx1ZSBwYWlyCiAgICAgIHZhciBjb250YWluc1ZhbGlkT2JqZWN0cyA9IHRydWU7CiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGVtcGxhdGUubGVuZ3RoOyBpKyspIHsKICAgICAgICB2YXIgaXRlbSA9IHRlbXBsYXRlWzBdOwogICAgICAgIGlmICh0eXBlb2YgaXRlbSAhPT0gJ29iamVjdCcpIHsKICAgICAgICAgIGNvbnRhaW5zVmFsaWRPYmplY3RzID0gZmFsc2U7CiAgICAgICAgICBicmVhazsKICAgICAgICB9CiAgICAgICAgaWYgKE9iamVjdC5rZXlzKGl0ZW0pLmxlbmd0aCAhPT0gMSkgewogICAgICAgICAgLy8gZmlyc3QgaXRlbSBpbiB0aGUgYXJyYXkgaGFzIG11bHRpcGxlIGtleSB2YWx1ZSBwYWlycywgc28gaW52YWxpZC4KICAgICAgICAgIGNvbnRhaW5zVmFsaWRPYmplY3RzID0gZmFsc2U7CiAgICAgICAgICBicmVhazsKICAgICAgICB9CiAgICAgIH0KICAgICAgaWYgKCFjb250YWluc1ZhbGlkT2JqZWN0cykgewogICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgfQogICAgICAvLyBDb25kaXRpb24gMy4KICAgICAgLy8gdGhlIGZpcnN0IGl0ZW0gc2hvdWxkIGhhdmUgI2lmIGFzIGl0cyBrZXkKICAgICAgLy8gdGhlIGZpcnN0IGl0ZW0gc2hvdWxkIGFsc28gY29udGFpbiBhbiBleHByZXNzaW9uCiAgICAgIHZhciBmaXJzdCA9IHRlbXBsYXRlWzBdOwogICAgICB2YXIgZnVuYzsKICAgICAgZm9yICh2YXIga2V5IGluIGZpcnN0KSB7CiAgICAgICAgZnVuYyA9IFRSQU5TRk9STS50b2tlbml6ZShrZXkpOwogICAgICAgIGlmICghZnVuYykgewogICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgIH0KICAgICAgICBpZiAoIWZ1bmMubmFtZSkgewogICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgIH0KICAgICAgICAvLyAne3sjaWYgfX0nCiAgICAgICAgaWYgKCFmdW5jLmV4cHJlc3Npb24gfHwgZnVuYy5leHByZXNzaW9uLmxlbmd0aCA9PT0gMCkgewogICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgIH0KICAgICAgICBpZiAoZnVuYy5uYW1lLnRvTG93ZXJDYXNlKCkgIT09ICcjaWYnKSB7CiAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgfQogICAgICB9CiAgICAgIGlmICh0ZW1wbGF0ZS5sZW5ndGggPT09IDEpIHsKICAgICAgICAvLyBJZiB3ZSBnb3QgdGhpcyBmYXIgYW5kIHRoZSB0ZW1wbGF0ZSBoYXMgb25seSBvbmUgaXRlbSwgaXQgbWVhbnMKICAgICAgICAvLyB0ZW1wbGF0ZSBoYWQgb25lIGl0ZW0gd2hpY2ggd2FzICcjaWYnIHNvIGl0J3MgdmFsaWQKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgfQogICAgICAvLyBDb25kaXRpb24gNC4KICAgICAgLy8gaW4gY2FzZSB0aGVyZSdzIG1vcmUgdGhhbiB0d28gaXRlbXMsIGV2ZXJ5dGhpbmcgYmV0d2VlbiB0aGUgZmlyc3QgYW5kIHRoZSBsYXN0IGl0ZW0gc2hvdWxkIGJlICNlbHNlaWYKICAgICAgdmFyIHRoZXlfYXJlX2FsbF9lbHNlaWZzID0gdHJ1ZTsKICAgICAgZm9yICh2YXIgdGVtcGxhdGVfaW5kZXggPSAxOyB0ZW1wbGF0ZV9pbmRleCA8IHRlbXBsYXRlLmxlbmd0aC0xOyB0ZW1wbGF0ZV9pbmRleCsrKSB7CiAgICAgICAgdmFyIHRlbXBsYXRlX2l0ZW0gPSB0ZW1wbGF0ZVt0ZW1wbGF0ZV9pbmRleF07CiAgICAgICAgZm9yICh2YXIgdGVtcGxhdGVfa2V5IGluIHRlbXBsYXRlX2l0ZW0pIHsKICAgICAgICAgIGZ1bmMgPSBUUkFOU0ZPUk0udG9rZW5pemUodGVtcGxhdGVfa2V5KTsKICAgICAgICAgIGlmIChmdW5jLm5hbWUudG9Mb3dlckNhc2UoKSAhPT0gJyNlbHNlaWYnKSB7CiAgICAgICAgICAgIHRoZXlfYXJlX2FsbF9lbHNlaWZzID0gZmFsc2U7CiAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfQogICAgICBpZiAoIXRoZXlfYXJlX2FsbF9lbHNlaWZzKSB7CiAgICAgICAgLy8gVGhlcmUgd2FzIGF0IGxlYXN0IG9uZSBpdGVtIHRoYXQgd2Fzbid0IGFuIGVsc2VpZgogICAgICAgIC8vIHRoZXJlZm9yZSBpbnZhbGlkCiAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICB9CiAgICAgIC8vIElmIHlvdSd2ZSByZWFjaGVkIHRoaXMgcG9pbnQsIGl0IG1lYW5zIHdlIGhhdmUgbXVsdGlwbGUgaXRlbXMgYW5kIGV2ZXJ5dGhpbmcgYmV0d2VlbiB0aGUgZmlyc3QgYW5kIHRoZSBsYXN0IGl0ZW0KICAgICAgLy8gYXJlIGVsc2VpZnMKICAgICAgLy8gTm93IHdlIG5lZWQgdG8gY2hlY2sgdGhlIHZhbGlkaXR5IG9mIHRoZSBsYXN0IGl0ZW0KICAgICAgLy8gQ29uZGl0aW9uIDUuCiAgICAgIC8vIGluIGNhc2UgdGhlcmUncyBtb3JlIHRoYW4gb25lIGl0ZW0sIGl0IHNob3VsZCBlbmQgd2l0aCAjZWxzZSBvciAjZWxzZWlmCiAgICAgIHZhciBsYXN0ID0gdGVtcGxhdGVbdGVtcGxhdGUubGVuZ3RoLTFdOwogICAgICBmb3IgKHZhciBsYXN0X2tleSBpbiBsYXN0KSB7CiAgICAgICAgZnVuYyA9IFRSQU5TRk9STS50b2tlbml6ZShsYXN0X2tleSk7CiAgICAgICAgaWYgKFsnI2Vsc2UnLCAnI2Vsc2VpZiddLmluZGV4T2YoZnVuYy5uYW1lLnRvTG93ZXJDYXNlKCkpID09PSAtMSkgewogICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgIH0KICAgICAgfQogICAgICAvLyBDb25ncmF0cywgaWYgeW91J3ZlIHJlYWNoZWQgdGhpcyBwb2ludCwgaXQncyB2YWxpZAogICAgICByZXR1cm4gdHJ1ZTsKICAgIH0sCiAgfTsKICB2YXIgVFJBTlNGT1JNID0gewogICAgbWVtb3J5OiB7fSwKICAgIHRyYW5zZm9ybTogZnVuY3Rpb24odGVtcGxhdGUsIGRhdGEsIGluamVjdGlvbiwgc2VyaWFsaXplZCkgewogICAgICB2YXIgc2VsZWN0b3IgPSBudWxsOwogICAgICBpZiAoLyNpbmNsdWRlLy50ZXN0KEpTT04uc3RyaW5naWZ5KHRlbXBsYXRlKSkpIHsKICAgICAgICBzZWxlY3RvciA9IGZ1bmN0aW9uKGtleSwgdmFsdWUpIHsgcmV0dXJuIC8jaW5jbHVkZS8udGVzdChrZXkpIHx8IC8jaW5jbHVkZS8udGVzdCh2YWx1ZSk7IH07CiAgICAgIH0KICAgICAgdmFyIHJlczsKICAgICAgaWYgKGluamVjdGlvbikgewogICAgICAgIC8vIHJlc29sdmUgdGVtcGxhdGUgd2l0aCBzZWxlY3RvcgogICAgICAgIHZhciByZXNvbHZlZF90ZW1wbGF0ZSA9IFNFTEVDVC5zZWxlY3QodGVtcGxhdGUsIHNlbGVjdG9yLCBzZXJpYWxpemVkKQogICAgICAgICAgLnRyYW5zZm9ybShkYXRhLCBzZXJpYWxpemVkKQogICAgICAgICAgLnJvb3QoKTsKICAgICAgICAvLyBhcHBseSB0aGUgcmVzb2x2ZWQgdGVtcGxhdGUgb24gZGF0YQogICAgICAgIHJlcyA9IFNFTEVDVC5zZWxlY3QoZGF0YSwgbnVsbCwgc2VyaWFsaXplZCkKICAgICAgICAgIC5pbmplY3QoaW5qZWN0aW9uLCBzZXJpYWxpemVkKQogICAgICAgICAgLnRyYW5zZm9ybVdpdGgocmVzb2x2ZWRfdGVtcGxhdGUsIHNlcmlhbGl6ZWQpCiAgICAgICAgICAucm9vdCgpOwogICAgICB9IGVsc2UgewogICAgICAgIC8vIG5vIG5lZWQgZm9yIHNlcGFyYXRlIHRlbXBsYXRlIHJlc29sdXRpb24gc3RlcAogICAgICAgIC8vIHNlbGVjdCB0aGUgdGVtcGxhdGUgd2l0aCBzZWxlY3RvciBhbmQgdHJhbnNmb3JtIGRhdGEKICAgICAgICByZXMgPSBTRUxFQ1Quc2VsZWN0KHRlbXBsYXRlLCBzZWxlY3Rvciwgc2VyaWFsaXplZCkKICAgICAgICAgIC50cmFuc2Zvcm0oZGF0YSwgc2VyaWFsaXplZCkKICAgICAgICAgIC5yb290KCk7CiAgICAgIH0KICAgICAgaWYgKHNlcmlhbGl6ZWQpIHsKICAgICAgICAvLyBuZWVkcyB0byByZXR1cm4gc3RyaW5naWZpZWQgdmVyc2lvbgogICAgICAgIHJldHVybiBKU09OLnN0cmluZ2lmeShyZXMpOwogICAgICB9IGVsc2UgewogICAgICAgIHJldHVybiByZXM7CiAgICAgIH0KICAgIH0sCiAgICB0b2tlbml6ZTogZnVuY3Rpb24oc3RyKSB7CiAgICAgIC8vIElOUFVUIDogc3RyaW5nCiAgICAgIC8vIE9VVFBVVCA6IHtuYW1lOiBGVU5DVElPTl9OQU1FOlNUUklORywgYXJnczogQVJHVU1FTlQ6QVJSQVl9CiAgICAgIHZhciByZSA9IC9ce1x7KC4rKVx9XH0vZzsKICAgICAgc3RyID0gc3RyLnJlcGxhY2UocmUsICckMScpOwogICAgICAvLyBzdHIgOiAnI2VhY2ggJGphc29uLml0ZW1zJwoKICAgICAgdmFyIHRva2VucyA9IHN0ci50cmltKCkuc3BsaXQoJyAnKTsKICAgICAgLy8gPT4gdG9rZW5zOiBbJyNlYWNoJywgJyRqYXNvbi5pdGVtcyddCgogICAgICB2YXIgZnVuYzsKICAgICAgaWYgKHRva2Vucy5sZW5ndGggPiAwKSB7CiAgICAgICAgaWYgKHRva2Vuc1swXVswXSA9PT0gJyMnKSB7CiAgICAgICAgICBmdW5jID0gdG9rZW5zLnNoaWZ0KCk7CiAgICAgICAgICAvLyA9PiBmdW5jOiAnI2VhY2gnIG9yICcjaWYnCiAgICAgICAgICAvLyA9PiB0b2tlbnM6IFsnJGphc29uLml0ZW1zJywgJyYmJywgJyRqYXNvbi5pdGVtcy5sZW5ndGgnLCAnPicsICcwJ10KCiAgICAgICAgICB2YXIgZXhwcmVzc2lvbiA9IHRva2Vucy5qb2luKCcgJyk7CiAgICAgICAgICAvLyA9PiBleHByZXNzaW9uOiAnJGphc29uLml0ZW1zICYmICRqYXNvbi5pdGVtcy5sZW5ndGggPiAwJwoKICAgICAgICAgIHJldHVybiB7IG5hbWU6IGZ1bmMsIGV4cHJlc3Npb246IGV4cHJlc3Npb24gfTsKICAgICAgICB9CiAgICAgIH0KICAgICAgcmV0dXJuIG51bGw7CiAgICB9LAogICAgcnVuOiBmdW5jdGlvbih0ZW1wbGF0ZSwgZGF0YSkgewogICAgICB2YXIgcmVzdWx0OwogICAgICB2YXIgZnVuOwogICAgICBpZiAodHlwZW9mIHRlbXBsYXRlID09PSAnc3RyaW5nJykgewogICAgICAgIC8vIExlYWYgbm9kZSwgc28gY2FsbCBUUkFOU0ZPUk0uZmlsbG91dCgpCiAgICAgICAgaWYgKEhlbHBlci5pc190ZW1wbGF0ZSh0ZW1wbGF0ZSkpIHsKICAgICAgICAgIHZhciBpbmNsdWRlX3N0cmluZ19yZSA9IC9ce1x7KFsgXSojaW5jbHVkZSlbIF0qKFteIF0qKVx9XH0vZzsKICAgICAgICAgIGlmIChpbmNsdWRlX3N0cmluZ19yZS50ZXN0KHRlbXBsYXRlKSkgewogICAgICAgICAgICBmdW4gPSBUUkFOU0ZPUk0udG9rZW5pemUodGVtcGxhdGUpOwogICAgICAgICAgICBpZiAoZnVuLmV4cHJlc3Npb24pIHsKICAgICAgICAgICAgICAvLyBpZiAjaW5jbHVkZSBoYXMgYXJndW1lbnRzLCBldmFsdWF0ZSBpdCBiZWZvcmUgYXR0YWNoaW5nCiAgICAgICAgICAgICAgcmVzdWx0ID0gVFJBTlNGT1JNLmZpbGxvdXQoZGF0YSwgJ3t7JyArIGZ1bi5leHByZXNzaW9uICsgJ319JywgdHJ1ZSk7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgLy8gc2hvdWxkbid0IGhhcHBlbiA9PgogICAgICAgICAgICAgIC8vIHsnd3JhcHBlcic6ICd7eyNpbmNsdWRlfX0nfQogICAgICAgICAgICAgIHJlc3VsdCA9IHRlbXBsYXRlOwogICAgICAgICAgICB9CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAvLyBub24tI2luY2x1ZGUKICAgICAgICAgICAgcmVzdWx0ID0gVFJBTlNGT1JNLmZpbGxvdXQoZGF0YSwgdGVtcGxhdGUpOwogICAgICAgICAgfQogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICByZXN1bHQgPSB0ZW1wbGF0ZTsKICAgICAgICB9CiAgICAgIH0gZWxzZSBpZiAoSGVscGVyLmlzX2FycmF5KHRlbXBsYXRlKSkgewogICAgICAgIGlmIChDb25kaXRpb25hbC5pcyh0ZW1wbGF0ZSkpIHsKICAgICAgICAgIHJlc3VsdCA9IENvbmRpdGlvbmFsLnJ1bih0ZW1wbGF0ZSwgZGF0YSk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIHJlc3VsdCA9IFtdOwogICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0ZW1wbGF0ZS5sZW5ndGg7IGkrKykgewogICAgICAgICAgICB2YXIgaXRlbSA9IFRSQU5TRk9STS5ydW4odGVtcGxhdGVbaV0sIGRhdGEpOwogICAgICAgICAgICBpZiAoaXRlbSkgewogICAgICAgICAgICAgIC8vIG9ubHkgcHVzaCB3aGVuIHRoZSByZXN1bHQgaXMgbm90IG51bGwKICAgICAgICAgICAgICAvLyBudWxsIGNvdWxkIG1lYW4gI2lmIGNsYXVzZXMgd2hlcmUgbm90aGluZyBtYXRjaGVkID0+IEluIHRoaXMgY2FzZSBpbnN0ZWFkIG9mIHJlbmRlcmluZyAnbnVsbCcsIHNob3VsZCBqdXN0IHNraXAgaXQgY29tcGxldGVseQogICAgICAgICAgICAgIC8vIFRvZG8gOiBEaXN0aW5ndWlzaCBiZXR3ZWVuICNpZiBhcnJheXMgYW5kIG9yZGluYXJ5IGFycmF5cywgYW5kIHJldHVybiBudWxsIGZvciBvcmRpbmFyeSBhcnJheXMKICAgICAgICAgICAgICByZXN1bHQucHVzaChpdGVtKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfSBlbHNlIGlmIChPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodGVtcGxhdGUpID09PSAnW29iamVjdCBPYmplY3RdJykgewogICAgICAgIC8vIHRlbXBsYXRlIGlzIGFuIG9iamVjdAogICAgICAgIHJlc3VsdCA9IHt9OwoKICAgICAgICAvLyAjIyBIYW5kbGluZyAjaW5jbHVkZQogICAgICAgIC8vIFRoaXMgbmVlZHMgdG8gcHJlY2VkZSBldmVyeXRoaW5nIGVsc2Ugc2luY2UgaXQncyBtZWFudCB0byBiZSBvdmVyd3JpdHRlbgogICAgICAgIC8vIGluIGNhc2Ugb2YgY29sbGlzaW9uCiAgICAgICAgdmFyIGluY2x1ZGVfb2JqZWN0X3JlID0gL1x7XHsoWyBdKiNpbmNsdWRlKVsgXSooLiopXH1cfS87CiAgICAgICAgdmFyIGluY2x1ZGVfa2V5cyA9IE9iamVjdC5rZXlzKHRlbXBsYXRlKS5maWx0ZXIoZnVuY3Rpb24oa2V5KSB7IHJldHVybiBpbmNsdWRlX29iamVjdF9yZS50ZXN0KGtleSk7IH0pOwogICAgICAgIGlmIChpbmNsdWRlX2tleXMubGVuZ3RoID4gMCkgewogICAgICAgIC8vIGZpbmQgdGhlIGZpcnN0IGtleSB3aXRoICNpbmNsdWRlCiAgICAgICAgICBmdW4gPSBUUkFOU0ZPUk0udG9rZW5pemUoaW5jbHVkZV9rZXlzWzBdKTsKICAgICAgICAgIGlmIChmdW4uZXhwcmVzc2lvbikgewogICAgICAgICAgICAvLyBpZiAjaW5jbHVkZSBoYXMgYXJndW1lbnRzLCBldmFsdWF0ZSBpdCBiZWZvcmUgYXR0YWNoaW5nCiAgICAgICAgICAgIHJlc3VsdCA9IFRSQU5TRk9STS5maWxsb3V0KHRlbXBsYXRlW2luY2x1ZGVfa2V5c1swXV0sICd7eycgKyBmdW4uZXhwcmVzc2lvbiArICd9fScsIHRydWUpOwogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgLy8gbm8gYXJndW1lbnQsIHNpbXBseSBhdHRhY2ggdGhlIGNoaWxkCiAgICAgICAgICAgIHJlc3VsdCA9IHRlbXBsYXRlW2luY2x1ZGVfa2V5c1swXV07CiAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICBmb3IgKHZhciBrZXkgaW4gdGVtcGxhdGUpIHsKICAgICAgICAgIC8vIENoZWNraW5nIHRvIHNlZSBpZiB0aGUga2V5IGNvbnRhaW5zIHRlbXBsYXRlLi4KICAgICAgICAgIC8vIEN1cnJlbnRseSB0aGUgb25seSBjYXNlIGZvciB0aGlzIGFyZSAnI2VhY2gnIGFuZCAnI2luY2x1ZGUnCiAgICAgICAgICBpZiAoSGVscGVyLmlzX3RlbXBsYXRlKGtleSkpIHsKICAgICAgICAgICAgZnVuID0gVFJBTlNGT1JNLnRva2VuaXplKGtleSk7CiAgICAgICAgICAgIGlmIChmdW4pIHsKICAgICAgICAgICAgICBpZiAoZnVuLm5hbWUgPT09ICcjaW5jbHVkZScpIHsKICAgICAgICAgICAgICAgIC8vIHRoaXMgd2FzIGhhbmRsZWQgYWJvdmUgKGJlZm9yZSB0aGUgZm9yIGxvb3ApIHNvIGp1c3QgaWdub3JlCiAgICAgICAgICAgICAgfSBlbHNlIGlmIChmdW4ubmFtZSA9PT0gJyNsZXQnKSB7CiAgICAgICAgICAgICAgICBpZiAoSGVscGVyLmlzX2FycmF5KHRlbXBsYXRlW2tleV0pICYmIHRlbXBsYXRlW2tleV0ubGVuZ3RoID09IDIpIHsKICAgICAgICAgICAgICAgICAgdmFyIGRlZnMgPSB0ZW1wbGF0ZVtrZXldWzBdOwogICAgICAgICAgICAgICAgICB2YXIgcmVhbF90ZW1wbGF0ZSA9IHRlbXBsYXRlW2tleV1bMV07CgogICAgICAgICAgICAgICAgICAvLyAxLiBQYXJzZSB0aGUgZmlyc3QgaXRlbSB0byBhc3NpZ24gdmFyaWFibGVzCiAgICAgICAgICAgICAgICAgIHZhciBwYXJzZWRfa2V5cyA9IFRSQU5TRk9STS5ydW4oZGVmcywgZGF0YSk7CgogICAgICAgICAgICAgICAgICAvLyAyLiBtb2RpZnkgdGhlIGRhdGEKICAgICAgICAgICAgICAgICAgZm9yKHZhciBwYXJzZWRfa2V5IGluIHBhcnNlZF9rZXlzKSB7CiAgICAgICAgICAgICAgICAgICAgVFJBTlNGT1JNLm1lbW9yeVtwYXJzZWRfa2V5XSA9IHBhcnNlZF9rZXlzW3BhcnNlZF9rZXldOwogICAgICAgICAgICAgICAgICAgIGRhdGFbcGFyc2VkX2tleV0gPSBwYXJzZWRfa2V5c1twYXJzZWRfa2V5XTsKICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgLy8gMi4gUGFzcyBpdCBpbnRvIFRSQU5TRk9STS5ydW4KICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gVFJBTlNGT1JNLnJ1bihyZWFsX3RlbXBsYXRlLCBkYXRhKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9IGVsc2UgaWYgKGZ1bi5uYW1lID09PSAnI2NvbmNhdCcpIHsKICAgICAgICAgICAgICAgIGlmIChIZWxwZXIuaXNfYXJyYXkodGVtcGxhdGVba2V5XSkpIHsKICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gW107CiAgICAgICAgICAgICAgICAgIHRlbXBsYXRlW2tleV0uZm9yRWFjaChmdW5jdGlvbihjb25jYXRfaXRlbSkgewogICAgICAgICAgICAgICAgICAgIHZhciByZXMgPSBUUkFOU0ZPUk0ucnVuKGNvbmNhdF9pdGVtLCBkYXRhKTsKICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSByZXN1bHQuY29uY2F0KHJlcyk7CiAgICAgICAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgICAgICAgaWYgKC9ce1x7KC4qPylcfVx9Ly50ZXN0KEpTT04uc3RyaW5naWZ5KHJlc3VsdCkpKSB7CiAgICAgICAgICAgICAgICAgICAgLy8gY29uY2F0IHNob3VsZCBvbmx5IHRyaWdnZXIgaWYgYWxsIG9mIGl0cyBjaGlsZHJlbgogICAgICAgICAgICAgICAgICAgIC8vIGhhdmUgc3VjY2Vzc2Z1bGx5IHBhcnNlZC4KICAgICAgICAgICAgICAgICAgICAvLyBzbyBjaGVjayBmb3IgYW55IHRlbXBsYXRlIGV4cHJlc3Npb24gaW4gdGhlIGVuZCByZXN1bHQKICAgICAgICAgICAgICAgICAgICAvLyBhbmQgaWYgdGhlcmUgaXMgb25lLCByZXZlcnQgdG8gdGhlIG9yaWdpbmFsIHRlbXBsYXRlCiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gdGVtcGxhdGU7CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9IGVsc2UgaWYgKGZ1bi5uYW1lID09PSAnI21lcmdlJykgewogICAgICAgICAgICAgICAgaWYgKEhlbHBlci5pc19hcnJheSh0ZW1wbGF0ZVtrZXldKSkgewogICAgICAgICAgICAgICAgICByZXN1bHQgPSB7fTsKICAgICAgICAgICAgICAgICAgdGVtcGxhdGVba2V5XS5mb3JFYWNoKGZ1bmN0aW9uKG1lcmdlX2l0ZW0pIHsKICAgICAgICAgICAgICAgICAgICB2YXIgcmVzID0gVFJBTlNGT1JNLnJ1bihtZXJnZV9pdGVtLCBkYXRhKTsKICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBrZXkgaW4gcmVzKSB7CiAgICAgICAgICAgICAgICAgICAgICByZXN1bHRba2V5XSA9IHJlc1trZXldOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICAgIC8vIGNsZWFuIHVwICRpbmRleCBmcm9tIHRoZSByZXN1bHQKICAgICAgICAgICAgICAgICAgLy8gbmVjZXNzYXJ5IGJlY2F1c2UgI21lcmdlIG1lcmdlcyBtdWx0aXBsZSBvYmplY3RzIGludG8gb25lLAogICAgICAgICAgICAgICAgICAvLyBhbmQgb25lIG9mIHRoZW0gbWF5IGJlICd0aGlzJywgaW4gd2hpY2ggY2FzZSB0aGUgJGluZGV4IGF0dHJpYnV0ZQogICAgICAgICAgICAgICAgICAvLyB3aWxsIGhhdmUgc251Y2sgaW50byB0aGUgZmluYWwgcmVzdWx0CiAgICAgICAgICAgICAgICAgIGlmKHR5cGVvZiBkYXRhID09PSAnb2JqZWN0JykgewogICAgICAgICAgICAgICAgICAgIGRlbGV0ZSByZXN1bHRbIiRpbmRleCJdOwoKICAgICAgICAgICAgICAgICAgICAvLyAjbGV0IGhhbmRsaW5nCiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgZGVjbGFyZWRfdmFycyBpbiBUUkFOU0ZPUk0ubWVtb3J5KSB7CiAgICAgICAgICAgICAgICAgICAgICBkZWxldGUgcmVzdWx0W2RlY2xhcmVkX3ZhcnNdOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICBkZWxldGUgU3RyaW5nLnByb3RvdHlwZS4kaW5kZXg7CiAgICAgICAgICAgICAgICAgICAgZGVsZXRlIE51bWJlci5wcm90b3R5cGUuJGluZGV4OwogICAgICAgICAgICAgICAgICAgIGRlbGV0ZSBGdW5jdGlvbi5wcm90b3R5cGUuJGluZGV4OwogICAgICAgICAgICAgICAgICAgIGRlbGV0ZSBBcnJheS5wcm90b3R5cGUuJGluZGV4OwogICAgICAgICAgICAgICAgICAgIGRlbGV0ZSBCb29sZWFuLnByb3RvdHlwZS4kaW5kZXg7CgogICAgICAgICAgICAgICAgICAgIC8vICNsZXQgaGFuZGxpbmcKICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBkZWNsYXJlZF92YXJzIGluIFRSQU5TRk9STS5tZW1vcnkpIHsKICAgICAgICAgICAgICAgICAgICAgIGRlbGV0ZSBTdHJpbmcucHJvdG90eXBlW2RlY2xhcmVkX3ZhcnNdOwogICAgICAgICAgICAgICAgICAgICAgZGVsZXRlIE51bWJlci5wcm90b3R5cGVbZGVjbGFyZWRfdmFyc107CiAgICAgICAgICAgICAgICAgICAgICBkZWxldGUgRnVuY3Rpb24ucHJvdG90eXBlW2RlY2xhcmVkX3ZhcnNdOwogICAgICAgICAgICAgICAgICAgICAgZGVsZXRlIEFycmF5LnByb3RvdHlwZVtkZWNsYXJlZF92YXJzXTsKICAgICAgICAgICAgICAgICAgICAgIGRlbGV0ZSBCb29sZWFuLnByb3RvdHlwZVtkZWNsYXJlZF92YXJzXTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9IGVsc2UgaWYgKGZ1bi5uYW1lID09PSAnI2VhY2gnKSB7CiAgICAgICAgICAgICAgICAvLyBuZXdEYXRhIHdpbGwgYmUgZmlsbGVkIHdpdGggcGFyc2VkIHJlc3VsdHMKICAgICAgICAgICAgICAgIHZhciBuZXdEYXRhID0gVFJBTlNGT1JNLmZpbGxvdXQoZGF0YSwgJ3t7JyArIGZ1bi5leHByZXNzaW9uICsgJ319JywgdHJ1ZSk7CgogICAgICAgICAgICAgICAgLy8gSWRlYWxseSBuZXdEYXRhIHNob3VsZCBiZSBhbiBhcnJheSBzaW5jZSBpdCB3YXMgcHJlZml4ZWQgYnkgI2VhY2gKICAgICAgICAgICAgICAgIGlmIChuZXdEYXRhICYmIEhlbHBlci5pc19hcnJheShuZXdEYXRhKSkgewogICAgICAgICAgICAgICAgICByZXN1bHQgPSBbXTsKICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaW5kZXggPSAwOyBpbmRleCA8IG5ld0RhdGEubGVuZ3RoOyBpbmRleCsrKSB7CiAgICAgICAgICAgICAgICAgICAgLy8gdGVtcG9yYXJpbHkgc2V0ICRpbmRleAogICAgICAgICAgICAgICAgICAgIGlmKHR5cGVvZiBuZXdEYXRhW2luZGV4XSA9PT0gJ29iamVjdCcpIHsKICAgICAgICAgICAgICAgICAgICAgIG5ld0RhdGFbaW5kZXhdWyIkaW5kZXgiXSA9IGluZGV4OwogICAgICAgICAgICAgICAgICAgICAgLy8gI2xldCBoYW5kbGluZwogICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgZGVjbGFyZWRfdmFycyBpbiBUUkFOU0ZPUk0ubWVtb3J5KSB7CiAgICAgICAgICAgICAgICAgICAgICAgIG5ld0RhdGFbaW5kZXhdW2RlY2xhcmVkX3ZhcnNdID0gVFJBTlNGT1JNLm1lbW9yeVtkZWNsYXJlZF92YXJzXTsKICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgU3RyaW5nLnByb3RvdHlwZS4kaW5kZXggPSBpbmRleDsKICAgICAgICAgICAgICAgICAgICAgIE51bWJlci5wcm90b3R5cGUuJGluZGV4ID0gaW5kZXg7CiAgICAgICAgICAgICAgICAgICAgICBGdW5jdGlvbi5wcm90b3R5cGUuJGluZGV4ID0gaW5kZXg7CiAgICAgICAgICAgICAgICAgICAgICBBcnJheS5wcm90b3R5cGUuJGluZGV4ID0gaW5kZXg7CiAgICAgICAgICAgICAgICAgICAgICBCb29sZWFuLnByb3RvdHlwZS4kaW5kZXggPSBpbmRleDsKICAgICAgICAgICAgICAgICAgICAgIC8vICNsZXQgaGFuZGxpbmcKICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGRlY2xhcmVkX3ZhcnMgaW4gVFJBTlNGT1JNLm1lbW9yeSkgewogICAgICAgICAgICAgICAgICAgICAgICBTdHJpbmcucHJvdG90eXBlW2RlY2xhcmVkX3ZhcnNdID0gVFJBTlNGT1JNLm1lbW9yeVtkZWNsYXJlZF92YXJzXTsKICAgICAgICAgICAgICAgICAgICAgICAgTnVtYmVyLnByb3RvdHlwZVtkZWNsYXJlZF92YXJzXSA9IFRSQU5TRk9STS5tZW1vcnlbZGVjbGFyZWRfdmFyc107CiAgICAgICAgICAgICAgICAgICAgICAgIEZ1bmN0aW9uLnByb3RvdHlwZVtkZWNsYXJlZF92YXJzXSA9IFRSQU5TRk9STS5tZW1vcnlbZGVjbGFyZWRfdmFyc107CiAgICAgICAgICAgICAgICAgICAgICAgIEFycmF5LnByb3RvdHlwZVtkZWNsYXJlZF92YXJzXSA9IFRSQU5TRk9STS5tZW1vcnlbZGVjbGFyZWRfdmFyc107CiAgICAgICAgICAgICAgICAgICAgICAgIEJvb2xlYW4ucHJvdG90eXBlW2RlY2xhcmVkX3ZhcnNdID0gVFJBTlNGT1JNLm1lbW9yeVtkZWNsYXJlZF92YXJzXTsKICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgIC8vIHJ1bgogICAgICAgICAgICAgICAgICAgIHZhciBsb29wX2l0ZW0gPSBUUkFOU0ZPUk0ucnVuKHRlbXBsYXRlW2tleV0sIG5ld0RhdGFbaW5kZXhdKTsKCiAgICAgICAgICAgICAgICAgICAgLy8gY2xlYW4gdXAgJGluZGV4CiAgICAgICAgICAgICAgICAgICAgaWYodHlwZW9mIG5ld0RhdGFbaW5kZXhdID09PSAnb2JqZWN0JykgewogICAgICAgICAgICAgICAgICAgICAgZGVsZXRlIG5ld0RhdGFbaW5kZXhdWyIkaW5kZXgiXTsKICAgICAgICAgICAgICAgICAgICAgIC8vICNsZXQgaGFuZGxpbmcKICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGRlY2xhcmVkX3ZhcnMgaW4gVFJBTlNGT1JNLm1lbW9yeSkgewogICAgICAgICAgICAgICAgICAgICAgICBkZWxldGUgbmV3RGF0YVtpbmRleF1bZGVjbGFyZWRfdmFyc107CiAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgIGRlbGV0ZSBTdHJpbmcucHJvdG90eXBlLiRpbmRleDsKICAgICAgICAgICAgICAgICAgICAgIGRlbGV0ZSBOdW1iZXIucHJvdG90eXBlLiRpbmRleDsKICAgICAgICAgICAgICAgICAgICAgIGRlbGV0ZSBGdW5jdGlvbi5wcm90b3R5cGUuJGluZGV4OwogICAgICAgICAgICAgICAgICAgICAgZGVsZXRlIEFycmF5LnByb3RvdHlwZS4kaW5kZXg7CiAgICAgICAgICAgICAgICAgICAgICBkZWxldGUgQm9vbGVhbi5wcm90b3R5cGUuJGluZGV4OwogICAgICAgICAgICAgICAgICAgICAgLy8gI2xldCBoYW5kbGluZwogICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgZGVjbGFyZWRfdmFycyBpbiBUUkFOU0ZPUk0ubWVtb3J5KSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGRlbGV0ZSBTdHJpbmcucHJvdG90eXBlW2RlY2xhcmVkX3ZhcnNdOwogICAgICAgICAgICAgICAgICAgICAgICBkZWxldGUgTnVtYmVyLnByb3RvdHlwZVtkZWNsYXJlZF92YXJzXTsKICAgICAgICAgICAgICAgICAgICAgICAgZGVsZXRlIEZ1bmN0aW9uLnByb3RvdHlwZVtkZWNsYXJlZF92YXJzXTsKICAgICAgICAgICAgICAgICAgICAgICAgZGVsZXRlIEFycmF5LnByb3RvdHlwZVtkZWNsYXJlZF92YXJzXTsKICAgICAgICAgICAgICAgICAgICAgICAgZGVsZXRlIEJvb2xlYW4ucHJvdG90eXBlW2RlY2xhcmVkX3ZhcnNdOwogICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgaWYgKGxvb3BfaXRlbSkgewogICAgICAgICAgICAgICAgICAgICAgLy8gb25seSBwdXNoIHdoZW4gdGhlIHJlc3VsdCBpcyBub3QgbnVsbAogICAgICAgICAgICAgICAgICAgICAgLy8gbnVsbCBjb3VsZCBtZWFuICNpZiBjbGF1c2VzIHdoZXJlIG5vdGhpbmcgbWF0Y2hlZCA9PiBJbiB0aGlzIGNhc2UgaW5zdGVhZCBvZiByZW5kZXJpbmcgJ251bGwnLCBzaG91bGQganVzdCBza2lwIGl0IGNvbXBsZXRlbHkKICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKGxvb3BfaXRlbSk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAvLyBJbiBjYXNlIGl0J3Mgbm90IGFuIGFycmF5LCBpdCdzIGFuIGV4Y2VwdGlvbiwgc2luY2UgaXQgd2FzIHByZWZpeGVkIGJ5ICNlYWNoLgogICAgICAgICAgICAgICAgICAvLyBUaGlzIHByb2JhYmx5IG1lYW5zIHRoaXMgI2VhY2ggaXMgbm90IGZvciB0aGUgY3VycmVudCB2YXJpYWJsZQogICAgICAgICAgICAgICAgICAvLyBGb3IgZXhhbXBsZSB7eyNlYWNoIGl0ZW1zfX0gbWF5IG5vdCBiZSBhbiBhcnJheSwgYnV0IGp1c3QgbGVhdmUgaXQgYmUsIHNvCiAgICAgICAgICAgICAgICAgIC8vIEJ1dCBkb24ndCBnZXQgcmlkIG9mIGl0LAogICAgICAgICAgICAgICAgICAvLyBJbnN0ZWFkLCBqdXN0IGxlYXZlIGl0IGFzIHRlbXBsYXRlCiAgICAgICAgICAgICAgICAgIC8vIFNvIHNvbWUgb3RoZXIgcGFyc2UgcnVuIGNvdWxkIGZpbGwgaXQgaW4gbGF0ZXIuCiAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IHRlbXBsYXRlOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0gLy8gZW5kIG9mICNlYWNoCiAgICAgICAgICAgIH0gZWxzZSB7IC8vIGVuZCBvZiBpZiAoZnVuKQogICAgICAgICAgICAgIC8vIElmIHRoZSBrZXkgaXMgYSB0ZW1wbGF0ZSBleHByZXNzaW9uIGJ1dCBhcmVuJ3QgZWl0aGVyICNpbmNsdWRlIG9yICNlYWNoLAogICAgICAgICAgICAgIC8vIGl0IG5lZWRzIHRvIGJlIHBhcnNlZAogICAgICAgICAgICAgIHZhciBrID0gVFJBTlNGT1JNLmZpbGxvdXQoZGF0YSwga2V5KTsKICAgICAgICAgICAgICB2YXIgdiA9IFRSQU5TRk9STS5maWxsb3V0KGRhdGEsIHRlbXBsYXRlW2tleV0pOwogICAgICAgICAgICAgIGlmIChrICE9PSB1bmRlZmluZWQgJiYgdiAhPT0gdW5kZWZpbmVkKSB7CiAgICAgICAgICAgICAgICByZXN1bHRba10gPSB2OwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgLy8gSGVscGVyLmlzX3RlbXBsYXRlKGtleSkgd2FzIGZhbHNlLCB3aGljaCBtZWFucyB0aGUga2V5IHdhcyBub3QgYSB0ZW1wbGF0ZSAoaGFyZGNvZGVkIHN0cmluZykKICAgICAgICAgICAgaWYgKHR5cGVvZiB0ZW1wbGF0ZVtrZXldID09PSAnc3RyaW5nJykgewogICAgICAgICAgICAgIGZ1biA9IFRSQU5TRk9STS50b2tlbml6ZSh0ZW1wbGF0ZVtrZXldKTsKICAgICAgICAgICAgICBpZiAoZnVuICYmIGZ1bi5uYW1lID09PSAnIz8nKSB7CiAgICAgICAgICAgICAgICAvLyBJZiB0aGUga2V5IGlzIGEgdGVtcGxhdGUgZXhwcmVzc2lvbiBidXQgYXJlbid0IGVpdGhlciAjaW5jbHVkZSBvciAjZWFjaCwKICAgICAgICAgICAgICAgIC8vIGl0IG5lZWRzIHRvIGJlIHBhcnNlZAogICAgICAgICAgICAgICAgdmFyIGZpbGxlZCA9IFRSQU5TRk9STS5maWxsb3V0KGRhdGEsICd7eycgKyBmdW4uZXhwcmVzc2lvbiArICd9fScpOwogICAgICAgICAgICAgICAgaWYgKGZpbGxlZCA9PT0gJ3t7JyArIGZ1bi5leHByZXNzaW9uICsgJ319JyB8fCAhZmlsbGVkKSB7CiAgICAgICAgICAgICAgICAgIC8vIGNhc2UgMS4KICAgICAgICAgICAgICAgICAgLy8gbm90IHBhcnNlZCwgd2hpY2ggbWVhbnMgdGhlIGV2YWx1YXRpb24gZmFpbGVkLgoKICAgICAgICAgICAgICAgICAgLy8gY2FzZSAyLgogICAgICAgICAgICAgICAgICAvLyByZXR1cm5zIGZhc2x5IHZhbHVlCgogICAgICAgICAgICAgICAgICAvLyBib3RoIGNhc2VzIG1lYW4gdGhpcyBrZXkgc2hvdWxkIGJlIGV4Y2x1ZGVkCiAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAvLyBvbmx5IGluY2x1ZGUgaWYgdGhlIGV2YWx1YXRpb24gaXMgdHJ1dGh5CiAgICAgICAgICAgICAgICAgIHJlc3VsdFtrZXldID0gZmlsbGVkOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICB2YXIgaXRlbSA9IFRSQU5TRk9STS5ydW4odGVtcGxhdGVba2V5XSwgZGF0YSk7CiAgICAgICAgICAgICAgICBpZiAoaXRlbSAhPT0gdW5kZWZpbmVkKSB7CiAgICAgICAgICAgICAgICAgIHJlc3VsdFtrZXldID0gaXRlbTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgdmFyIGl0ZW0gPSBUUkFOU0ZPUk0ucnVuKHRlbXBsYXRlW2tleV0sIGRhdGEpOwogICAgICAgICAgICAgIGlmIChpdGVtICE9PSB1bmRlZmluZWQpIHsKICAgICAgICAgICAgICAgIHJlc3VsdFtrZXldID0gaXRlbTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0gZWxzZSB7CiAgICAgICAgcmV0dXJuIHRlbXBsYXRlOwogICAgICB9CiAgICAgIHJldHVybiByZXN1bHQ7CiAgICB9LAogICAgZmlsbG91dDogZnVuY3Rpb24oZGF0YSwgdGVtcGxhdGUsIHJhdykgewogICAgICAvLyAxLiBmaWxsIG91dCBpZiBwb3NzaWJsZQogICAgICAvLyAyLiBvdGhlcndpc2UgcmV0dXJuIHRoZSBvcmlnaW5hbAogICAgICB2YXIgcmVwbGFjZWQgPSB0ZW1wbGF0ZTsKICAgICAgLy8gUnVuIGZpbGxvdXQoKSBvbmx5IGlmIGl0J3MgYSB0ZW1wbGF0ZS4gT3RoZXJ3aXNlIGp1c3QgcmV0dXJuIHRoZSBvcmlnaW5hbCBzdHJpbmcKICAgICAgaWYgKEhlbHBlci5pc190ZW1wbGF0ZSh0ZW1wbGF0ZSkpIHsKICAgICAgICB2YXIgcmUgPSAvXHtceyguKj8pXH1cfS9nOwoKICAgICAgICAvLyB2YXJpYWJsZXMgYXJlIGFsbCBpbnN0YW5jZXMgb2Yge3sgfX0gaW4gdGhlIGN1cnJlbnQgZXhwcmVzc2lvbgogICAgICAgIC8vIGZvciBleGFtcGxlICd7e3RoaXMuaXRlbX19IGlzIHt7dGhpcy51c2VyfX0ncycgaGFzIHR3byB2YXJpYWJsZXM6IFsndGhpcy5pdGVtJywgJ3RoaXMudXNlciddCiAgICAgICAgdmFyIHZhcmlhYmxlcyA9IHRlbXBsYXRlLm1hdGNoKHJlKTsKCiAgICAgICAgaWYgKHZhcmlhYmxlcykgewogICAgICAgICAgaWYgKHJhdykgewogICAgICAgICAgICAvLyAncmF3JyBpcyB0cnVlIG9ubHkgZm9yIHdoZW4gdGhpcyBpcyBjYWxsZWQgZnJvbSAjZWFjaAogICAgICAgICAgICAvLyBCZWNhdXNlICNlYWNoIGlzIGV4cGVjdGluZyBhbiBhcnJheSwgaXQgc2hvdWxkbid0IGJlIHN0cmluZ2lmaWVkLgogICAgICAgICAgICAvLyBUaGVyZWZvcmUgd2UgcGFzcyB0ZW1wbGF0ZTpudWxsLAogICAgICAgICAgICAvLyB3aGljaCB3aWxsIHJlc3VsdCBpbiByZXR1cm5pbmcgdGhlIG9yaWdpbmFsIHJlc3VsdCBpbnN0ZWFkIG9mIHRyeWluZyB0bwogICAgICAgICAgICAvLyByZXBsYWNlIGl0IGludG8gdGhlIHRlbXBsYXRlIHdpdGggYSBzdHJpbmdpZmllZCB2ZXJzaW9uCiAgICAgICAgICAgIHJlcGxhY2VkID0gVFJBTlNGT1JNLl9maWxsb3V0KHsKICAgICAgICAgICAgICB2YXJpYWJsZTogdmFyaWFibGVzWzBdLAogICAgICAgICAgICAgIGRhdGE6IGRhdGEsCiAgICAgICAgICAgICAgdGVtcGxhdGU6IG51bGwsCiAgICAgICAgICAgIH0pOwogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgLy8gRmlsbCBvdXQgdGhlIHRlbXBsYXRlIGZvciBlYWNoIHZhcmlhYmxlCiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdmFyaWFibGVzLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgICAgICAgdmFyIHZhcmlhYmxlID0gdmFyaWFibGVzW2ldOwogICAgICAgICAgICAgIHJlcGxhY2VkID0gVFJBTlNGT1JNLl9maWxsb3V0KHsKICAgICAgICAgICAgICAgIHZhcmlhYmxlOiB2YXJpYWJsZSwKICAgICAgICAgICAgICAgIGRhdGE6IGRhdGEsCiAgICAgICAgICAgICAgICB0ZW1wbGF0ZTogcmVwbGFjZWQsCiAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9IGVsc2UgewogICAgICAgICAgcmV0dXJuIHJlcGxhY2VkOwogICAgICAgIH0KICAgICAgfQogICAgICByZXR1cm4gcmVwbGFjZWQ7CiAgICB9LAogICAgX2ZpbGxvdXQ6IGZ1bmN0aW9uKG9wdGlvbnMpIHsKICAgICAgLy8gR2l2ZW4gYSB0ZW1wbGF0ZSBhbmQgZmlsbCBpdCBvdXQgd2l0aCBwYXNzZWQgc2xvdCBhbmQgaXRzIGNvcnJlc3BvbmRpbmcgZGF0YQogICAgICB2YXIgcmUgPSAvXHtceyguKj8pXH1cfS9nOwogICAgICB2YXIgZnVsbF9yZSA9IC9eXHtceygoPyFcfVx9KS4pKlx9XH0kLzsKICAgICAgdmFyIHZhcmlhYmxlID0gb3B0aW9ucy52YXJpYWJsZTsKICAgICAgdmFyIGRhdGEgPSBvcHRpb25zLmRhdGE7CiAgICAgIHZhciB0ZW1wbGF0ZSA9IG9wdGlvbnMudGVtcGxhdGU7CiAgICAgIHRyeSB7CiAgICAgICAgLy8gMS4gRXZhbHVhdGUgdGhlIHZhcmlhYmxlCiAgICAgICAgdmFyIHNsb3QgPSB2YXJpYWJsZS5yZXBsYWNlKHJlLCAnJDEnKTsKCiAgICAgICAgLy8gZGF0YSBtdXN0IGV4aXN0LiBPdGhlcndpc2UgcmVwbGFjZSB3aXRoIGJsYW5rCiAgICAgICAgaWYgKGRhdGEpIHsKICAgICAgICAgIHZhciBmdW5jOwogICAgICAgICAgLy8gQXR0YWNoICRyb290IHRvIGVhY2ggbm9kZSBzbyB0aGF0IHdlIGNhbiByZWZlcmVuY2UgaXQgZnJvbSBhbnl3aGVyZQogICAgICAgICAgdmFyIGRhdGFfdHlwZSA9IHR5cGVvZiBkYXRhOwogICAgICAgICAgaWYgKFsnbnVtYmVyJywgJ3N0cmluZycsICdhcnJheScsICdib29sZWFuJywgJ2Z1bmN0aW9uJ10uaW5kZXhPZihkYXRhX3R5cGUgPT09IC0xKSkgewogICAgICAgICAgICBkYXRhLiRyb290ID0gcm9vdDsKICAgICAgICAgIH0KICAgICAgICAgIC8vIElmIHRoZSBwYXR0ZXJuIGVuZHMgd2l0aCBhIHJldHVybiBzdGF0ZW1lbnQsIGJ1dCBpcyBOT1Qgd3JhcHBlZCBpbnNpZGUgYW5vdGhlciBmdW5jdGlvbiAoW159XSokKSwgaXQncyBhIGZ1bmN0aW9uIGV4cHJlc3Npb24KICAgICAgICAgIHZhciBtYXRjaCA9IC9mdW5jdGlvblwoWyBdKlwpWyBdKlx7KC4qKVx9WyBdKiQvZy5leGVjKHNsb3QpOwogICAgICAgICAgaWYgKG1hdGNoKSB7CiAgICAgICAgICAgIGZ1bmMgPSBGdW5jdGlvbignd2l0aCh0aGlzKSB7JyArIG1hdGNoWzFdICsgJ30nKS5iaW5kKGRhdGEpOwogICAgICAgICAgfSBlbHNlIGlmICgvXGJyZXR1cm4gW147XSs7P1sgXSokLy50ZXN0KHNsb3QpICYmIC9yZXR1cm5bXn1dKiQvLnRlc3Qoc2xvdCkpIHsKICAgICAgICAgICAgLy8gRnVuY3Rpb24gZXhwcmVzc2lvbiB3aXRoIGV4cGxpY2l0ICdyZXR1cm4nIGV4cHJlc3Npb24KICAgICAgICAgICAgZnVuYyA9IEZ1bmN0aW9uKCd3aXRoKHRoaXMpIHsnICsgc2xvdCArICd9JykuYmluZChkYXRhKTsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIC8vIEZ1bmN0aW9uIGV4cHJlc3Npb24gd2l0aCBleHBsaWNpdCAncmV0dXJuJyBleHByZXNzaW9uCiAgICAgICAgICAgIC8vIE9yZGluYXJ5IHNpbXBsZSBleHByZXNzaW9uIHRoYXQKICAgICAgICAgICAgZnVuYyA9IEZ1bmN0aW9uKCd3aXRoKHRoaXMpIHtyZXR1cm4gKCcgKyBzbG90ICsgJyl9JykuYmluZChkYXRhKTsKICAgICAgICAgIH0KICAgICAgICAgIHZhciBldmFsdWF0ZWQgPSBmdW5jKCk7CiAgICAgICAgICBkZWxldGUgZGF0YS4kcm9vdDsgIC8vIHJlbW92ZSAkcm9vdCBub3cgdGhhdCB0aGUgcGFyc2luZyBpcyBvdmVyCiAgICAgICAgICBpZiAoZXZhbHVhdGVkKSB7CiAgICAgICAgICAgIC8vIEluIGNhc2Ugb2YgcHJpbWl0aXZlIHR5cGVzIHN1Y2ggYXMgU3RyaW5nLCBuZWVkIHRvIGNhbGwgdmFsdWVPZigpIHRvIGdldCB0aGUgYWN0dWFsIHZhbHVlIGluc3RlYWQgb2YgdGhlIHByb21vdGVkIG9iamVjdAogICAgICAgICAgICBldmFsdWF0ZWQgPSBldmFsdWF0ZWQudmFsdWVPZigpOwogICAgICAgICAgfQogICAgICAgICAgaWYgKHR5cGVvZiBldmFsdWF0ZWQgPT09ICd1bmRlZmluZWQnKSB7CiAgICAgICAgICAgIC8vIGl0IHRyaWVkIHRvIGV2YWx1YXRlIHNpbmNlIHRoZSB2YXJpYWJsZSBleGlzdGVkLCBidXQgZW5kZWQgdXAgZXZhbHVhdGluZyB0byB1bmRlZmluZWQKICAgICAgICAgICAgLy8gKGV4YW1wbGU6IHZhciBhID0gWzEsMiwzLDRdOyB2YXIgYiA9IGFbNV07KQogICAgICAgICAgICByZXR1cm4gdGVtcGxhdGU7CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAvLyAyLiBGaWxsIG91dCB0aGUgdGVtcGxhdGUgd2l0aCB0aGUgZXZhbHVhdGVkIHZhbHVlCiAgICAgICAgICAgIC8vIEJlIGZvcmdpdmluZyBhbmQgcHJpbnQgYW55IHR5cGUsIGV2ZW4gZnVuY3Rpb25zLCBzbyBpdCdzIGVhc2llciB0byBkZWJ1ZwogICAgICAgICAgICBpZiAoZXZhbHVhdGVkKSB7CiAgICAgICAgICAgICAgLy8gSURFQUwgQ0FTRSA6IFJldHVybiB0aGUgcmVwbGFjZWQgdGVtcGxhdGUKICAgICAgICAgICAgICBpZiAodGVtcGxhdGUpIHsKICAgICAgICAgICAgICAgIC8vIGlmIHRoZSB0ZW1wbGF0ZSBpcyBhIHB1cmUgdGVtcGxhdGUgd2l0aCBubyBhZGRpdGlvbmFsIHN0YXRpYyB0ZXh0LAogICAgICAgICAgICAgICAgLy8gQW5kIGlmIHRoZSBldmFsdWF0ZWQgdmFsdWUgaXMgYW4gb2JqZWN0IG9yIGFuIGFycmF5LCB3ZSByZXR1cm4gdGhlIG9iamVjdCBpdHNlbGYgaW5zdGVhZCBvZgogICAgICAgICAgICAgICAgLy8gcmVwbGFjaW5nIGl0IGludG8gdGVtcGxhdGUgdmlhIHN0cmluZyByZXBsYWNlLCBzaW5jZSB0aGF0IHdpbGwgdHVybiBpdCBpbnRvIGEgc3RyaW5nLgogICAgICAgICAgICAgICAgaWYgKGZ1bGxfcmUudGVzdCh0ZW1wbGF0ZSkpIHsKICAgICAgICAgICAgICAgICAgcmV0dXJuIGV2YWx1YXRlZDsKICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgIHJldHVybiB0ZW1wbGF0ZS5yZXBsYWNlKHZhcmlhYmxlLCBldmFsdWF0ZWQpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICByZXR1cm4gZXZhbHVhdGVkOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAvLyBUcmVhdCBmYWxzZSBvciBudWxsIGFzIGJsYW5rcyAoc28gdGhhdCAjaWYgY2FuIGhhbmRsZSBpdCkKICAgICAgICAgICAgICBpZiAodGVtcGxhdGUpIHsKICAgICAgICAgICAgICAgIC8vIGlmIHRoZSB0ZW1wbGF0ZSBpcyBhIHB1cmUgdGVtcGxhdGUgd2l0aCBubyBhZGRpdGlvbmFsIHN0YXRpYyB0ZXh0LAogICAgICAgICAgICAgICAgLy8gQW5kIGlmIHRoZSBldmFsdWF0ZWQgdmFsdWUgaXMgYW4gb2JqZWN0IG9yIGFuIGFycmF5LCB3ZSByZXR1cm4gdGhlIG9iamVjdCBpdHNlbGYgaW5zdGVhZCBvZgogICAgICAgICAgICAgICAgLy8gcmVwbGFjaW5nIGl0IGludG8gdGVtcGxhdGUgdmlhIHN0cmluZyByZXBsYWNlLCBzaW5jZSB0aGF0IHdpbGwgdHVybiBpdCBpbnRvIGEgc3RyaW5nLgogICAgICAgICAgICAgICAgaWYgKGZ1bGxfcmUudGVzdCh0ZW1wbGF0ZSkpIHsKICAgICAgICAgICAgICAgICAgcmV0dXJuIGV2YWx1YXRlZDsKICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgIHJldHVybiB0ZW1wbGF0ZS5yZXBsYWNlKHZhcmlhYmxlLCAnJyk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIHJldHVybiAnJzsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgLy8gUkVTVCBPRiBUSEUgQ0FTRVMKICAgICAgICAvLyBpZiBldmFsdWF0ZWQgaXMgbnVsbCBvciB1bmRlZmluZWQsCiAgICAgICAgLy8gaXQgcHJvYmFibHkgbWVhbnMgb25lIG9mIHRoZSBmb2xsb3dpbmc6CiAgICAgICAgLy8gIDEuIFRoZSBjdXJyZW50IGRhdGEgYmVpbmcgcGFyc2VkIGlzIG5vdCBmb3IgdGhlIGN1cnJlbnQgdGVtcGxhdGUKICAgICAgICAvLyAgMi4gSXQncyBhbiBlcnJvcgogICAgICAgIC8vCiAgICAgICAgLy8gIEluIGVpdGhlciBjYXNlIHdlIG5lZWQgdG8gcmV0dXJuIHRoZSBvcmlnaW5hbCB0ZW1wbGF0ZSB1bnBhcnNlZC4KICAgICAgICAvLyAgICAxLiBmb3IgY2FzZTEsIHdlIG5lZWQgdG8gbGVhdmUgdGhlIHRlbXBsYXRlIGFsb25lIHNvIHRoYXQgdGhlIHRlbXBsYXRlIGNhbiBiZSBwYXJzZWQKICAgICAgICAvLyAgICAgIGJ5IGFub3RoZXIgZGF0YSBzZXQKICAgICAgICAvLyAgICAyLiBmb3IgY2FzZTIsIGl0J3MgYmV0dGVyIHRvIGp1c3QgcmV0dXJuIHRoZSB0ZW1wbGF0ZSBzbyBpdCdzIGVhc2llciB0byBkZWJ1ZwogICAgICAgIHJldHVybiB0ZW1wbGF0ZTsKICAgICAgfSBjYXRjaCAoZXJyKSB7CiAgICAgICAgcmV0dXJuIHRlbXBsYXRlOwogICAgICB9CiAgICB9LAogIH07CiAgdmFyIFNFTEVDVCA9IHsKICAgIC8vIGN1cnJlbnQ6IGN1cnJlbnRseSBhY2Nlc3NlZCBvYmplY3QKICAgIC8vIHBhdGg6IHRoZSBwYXRoIGxlYWRpbmcgdG8gdGhpcyBpdGVtCiAgICAvLyBmaWx0ZXI6IFRoZSBmaWx0ZXIgZnVuY3Rpb24gdG8gZGVjaWRlIHdoZXRoZXIgdG8gc2VsZWN0IG9yIG5vdAogICAgJHZhbDogbnVsbCwKICAgICRzZWxlY3RlZDogW10sCiAgICAkaW5qZWN0ZWQ6IFtdLAogICAgJHByb2dyZXNzOiBudWxsLAogICAgZXhlYzogZnVuY3Rpb24oY3VycmVudCwgcGF0aCwgZmlsdGVyKSB7CiAgICAgIC8vIGlmIGN1cnJlbnQgbWF0Y2hlcyB0aGUgcGF0dGVybiwgcHV0IGl0IGluIHRoZSBzZWxlY3RlZCBhcnJheQogICAgICBpZiAodHlwZW9mIGN1cnJlbnQgPT09ICdzdHJpbmcnKSB7CiAgICAgICAgLy8gbGVhZiBub2RlIHNob3VsZCBiZSBpZ25vcmVkCiAgICAgICAgLy8gd2UncmUgbG9va2luIGZvciBrZXlzIG9ubHkKICAgICAgfSBlbHNlIGlmIChIZWxwZXIuaXNfYXJyYXkoY3VycmVudCkpIHsKICAgICAgICBmb3IgKHZhciBpPTA7IGk8Y3VycmVudC5sZW5ndGg7IGkrKykgewogICAgICAgICAgU0VMRUNULmV4ZWMoY3VycmVudFtpXSwgcGF0aCsnWycraSsnXScsIGZpbHRlcik7CiAgICAgICAgfQogICAgICB9IGVsc2UgewogICAgICAgIC8vIG9iamVjdAogICAgICAgIGZvciAodmFyIGtleSBpbiBjdXJyZW50KSB7CiAgICAgICAgICAvLyAnJHJvb3QnIGlzIGEgc3BlY2lhbCBrZXkgdGhhdCBsaW5rcyB0byB0aGUgcm9vdCBub2RlCiAgICAgICAgICAvLyBzbyBzaG91bGRuJ3QgYmUgdXNlZCB0byBpdGVyYXRlCiAgICAgICAgICBpZiAoa2V5ICE9PSAnJHJvb3QnKSB7CiAgICAgICAgICAgIGlmIChmaWx0ZXIoa2V5LCBjdXJyZW50W2tleV0pKSB7CiAgICAgICAgICAgICAgdmFyIGluZGV4ID0gU0VMRUNULiRzZWxlY3RlZC5sZW5ndGg7CiAgICAgICAgICAgICAgU0VMRUNULiRzZWxlY3RlZC5wdXNoKHsKICAgICAgICAgICAgICAgIGluZGV4OiBpbmRleCwKICAgICAgICAgICAgICAgIGtleToga2V5LAogICAgICAgICAgICAgICAgcGF0aDogcGF0aCwKICAgICAgICAgICAgICAgIG9iamVjdDogY3VycmVudCwKICAgICAgICAgICAgICAgIHZhbHVlOiBjdXJyZW50W2tleV0sCiAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgU0VMRUNULmV4ZWMoY3VycmVudFtrZXldLCBwYXRoKydbIicra2V5KyciXScsIGZpbHRlcik7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9CiAgICB9LAogICAgaW5qZWN0OiBmdW5jdGlvbihvYmosIHNlcmlhbGl6ZWQpIHsKICAgICAgU0VMRUNULiRpbmplY3RlZCA9IG9iajsKICAgICAgdHJ5IHsKICAgICAgICBpZiAoc2VyaWFsaXplZCkgU0VMRUNULiRpbmplY3RlZCA9IEpTT04ucGFyc2Uob2JqKTsKICAgICAgfSBjYXRjaCAoZXJyb3IpIHsgfQoKICAgICAgaWYgKE9iamVjdC5rZXlzKFNFTEVDVC4kaW5qZWN0ZWQpLmxlbmd0aCA+IDApIHsKICAgICAgICBTRUxFQ1Quc2VsZWN0KFNFTEVDVC4kaW5qZWN0ZWQpOwogICAgICB9CiAgICAgIHJldHVybiBTRUxFQ1Q7CiAgICB9LAogICAgLy8gcmV0dXJucyB0aGUgb2JqZWN0IGl0c2VsZgogICAgc2VsZWN0OiBmdW5jdGlvbihvYmosIGZpbHRlciwgc2VyaWFsaXplZCkgewogICAgICAvLyBpdGVyYXRlICckc2VsZWN0ZWQnCiAgICAgIC8vCiAgICAgIC8qCiAgICAgIFNFTEVDVC4kc2VsZWN0ZWQgPSBbewogICAgICAgIHZhbHVlIHsKICAgICAgICAgICd7eyNpbmNsdWRlfX0nOiB7CiAgICAgICAgICAgICd7eyNlYWNoIGl0ZW1zfX0nOiB7CiAgICAgICAgICAgICAgJ3R5cGUnOiAnbGFiZWwnLAogICAgICAgICAgICAgICd0ZXh0JzogJ3t7bmFtZX19JwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfSwKICAgICAgICBwYXRoOiAnJGphc29uLmhlYWQuYWN0aW9ucy4kbG9hZCcKICAgICAgICAuLi4KICAgICAgfV0KICAgICAgKi8KICAgICAgdmFyIGpzb24gPSBvYmo7CiAgICAgIHRyeSB7CiAgICAgICAgaWYgKHNlcmlhbGl6ZWQpIGpzb24gPSBKU09OLnBhcnNlKG9iaik7CiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7IH0KCiAgICAgIGlmIChmaWx0ZXIpIHsKICAgICAgICBTRUxFQ1QuJHNlbGVjdGVkID0gW107CiAgICAgICAgU0VMRUNULmV4ZWMoanNvbiwgJycsIGZpbHRlcik7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgU0VMRUNULiRzZWxlY3RlZCA9IG51bGw7CiAgICAgIH0KCiAgICAgIGlmIChqc29uICYmIChIZWxwZXIuaXNfYXJyYXkoanNvbikgfHwgdHlwZW9mIGpzb24gPT09ICdvYmplY3QnKSkgewogICAgICAgIGlmICghU0VMRUNULiRwcm9ncmVzcykgewogICAgICAgICAgLy8gaW5pdGlhbGl6ZQogICAgICAgICAgaWYgKEhlbHBlci5pc19hcnJheShqc29uKSkgewogICAgICAgICAgICBTRUxFQ1QuJHZhbCA9IFtdOwogICAgICAgICAgICBTRUxFQ1QuJHNlbGVjdGVkX3Jvb3QgPSBbXTsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIFNFTEVDVC4kdmFsID0ge307CiAgICAgICAgICAgIFNFTEVDVC4kc2VsZWN0ZWRfcm9vdCA9IHt9OwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgICBPYmplY3Qua2V5cyhqc29uKS5mb3JFYWNoKGZ1bmN0aW9uKGtleSkgewogICAgICAgIC8vZm9yICh2YXIga2V5IGluIGpzb24pIHsKICAgICAgICAgIFNFTEVDVC4kdmFsW2tleV0gPSBqc29uW2tleV07CiAgICAgICAgICBTRUxFQ1QuJHNlbGVjdGVkX3Jvb3Rba2V5XSA9IGpzb25ba2V5XTsKICAgICAgICB9KTsKICAgICAgfSBlbHNlIHsKICAgICAgICBTRUxFQ1QuJHZhbCA9IGpzb247CiAgICAgICAgU0VMRUNULiRzZWxlY3RlZF9yb290ID0ganNvbjsKICAgICAgfQogICAgICBTRUxFQ1QuJHByb2dyZXNzID0gdHJ1ZTsgLy8gc2V0IHRoZSAnaW4gcHJvZ3Jlc3MnIGZsYWcKCiAgICAgIHJldHVybiBTRUxFQ1Q7CiAgICB9LAogICAgdHJhbnNmb3JtV2l0aDogZnVuY3Rpb24ob2JqLCBzZXJpYWxpemVkKSB7CiAgICAgIFNFTEVDVC4kcGFyc2VkID0gW107CiAgICAgIFNFTEVDVC4kcHJvZ3Jlc3MgPSBudWxsOwogICAgICAvKgogICAgICAqICAnc2VsZWN0ZWQnIGlzIGFuIGFycmF5IHRoYXQgY29udGFpbnMgaXRlbXMgdGhhdCBsb29rcyBsaWtlIHRoaXM6CiAgICAgICogIHsKICAgICAgKiAgICBrZXk6IFRoZSBzZWxlY3RlZCBrZXksCiAgICAgICogICAgcGF0aDogVGhlIHBhdGggbGVhZGluZyBkb3duIHRvIHRoZSBzZWxlY3RlZCBrZXksCiAgICAgICogICAgb2JqZWN0OiBUaGUgZW50aXJlIG9iamVjdCB0aGF0IGNvbnRhaW5zIHRoZSBjdXJyZW50bHkgc2VsZWN0ZWQga2V5L3ZhbCBwYWlyCiAgICAgICogICAgdmFsdWU6IFRoZSBzZWxlY3RlZCB2YWx1ZQogICAgICAqICB9CiAgICAgICovCiAgICAgIHZhciB0ZW1wbGF0ZSA9IG9iajsKICAgICAgdHJ5IHsKICAgICAgICBpZiAoc2VyaWFsaXplZCkgdGVtcGxhdGUgPSBKU09OLnBhcnNlKG9iaik7CiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7IH0KCiAgICAgIC8vIFNldHRpbmcgJHJvb3QKICAgICAgU0VMRUNULiR0ZW1wbGF0ZV9yb290ID0gdGVtcGxhdGU7CiAgICAgIFN0cmluZy5wcm90b3R5cGUuJHJvb3QgPSBTRUxFQ1QuJHNlbGVjdGVkX3Jvb3Q7CiAgICAgIE51bWJlci5wcm90b3R5cGUuJHJvb3QgPSBTRUxFQ1QuJHNlbGVjdGVkX3Jvb3Q7CiAgICAgIEZ1bmN0aW9uLnByb3RvdHlwZS4kcm9vdCA9IFNFTEVDVC4kc2VsZWN0ZWRfcm9vdDsKICAgICAgQXJyYXkucHJvdG90eXBlLiRyb290ID0gU0VMRUNULiRzZWxlY3RlZF9yb290OwogICAgICBCb29sZWFuLnByb3RvdHlwZS4kcm9vdCA9IFNFTEVDVC4kc2VsZWN0ZWRfcm9vdDsKICAgICAgcm9vdCA9IFNFTEVDVC4kc2VsZWN0ZWRfcm9vdDsKICAgICAgLy8gZ2VuZXJhdGUgbmV3ICRzZWxlY3RlZF9yb290CiAgICAgIGlmIChTRUxFQ1QuJHNlbGVjdGVkICYmIFNFTEVDVC4kc2VsZWN0ZWQubGVuZ3RoID4gMCkgewogICAgICAgIFNFTEVDVC4kc2VsZWN0ZWQuc29ydChmdW5jdGlvbihhLCBiKSB7CiAgICAgICAgICAvLyBzb3J0IGJ5IHBhdGggbGVuZ3RoLCBzbyB0aGF0IGRlZXBlciBsZXZlbCBpdGVtcyB3aWxsIGJlIHJlcGxhY2VkIGZpcnN0CiAgICAgICAgICAvLyBUT0RPOiBtYXkgbmVlZCB0byBsb29rIGludG8gZWRnZSBjYXNlcwogICAgICAgICAgcmV0dXJuIGIucGF0aC5sZW5ndGggLSBhLnBhdGgubGVuZ3RoOwogICAgICAgIH0pLmZvckVhY2goZnVuY3Rpb24oc2VsZWN0aW9uKSB7CiAgICAgICAgLy9TRUxFQ1QuJHNlbGVjdGVkLmZvckVhY2goZnVuY3Rpb24oc2VsZWN0aW9uKSB7CiAgICAgICAgICAvLyBwYXJzZSBzZWxlY3RlZAogICAgICAgICAgdmFyIHBhcnNlZF9vYmplY3QgPSBUUkFOU0ZPUk0ucnVuKHRlbXBsYXRlLCBzZWxlY3Rpb24ub2JqZWN0KTsKCiAgICAgICAgICAvLyBhcHBseSB0aGUgcmVzdWx0IHRvIHJvb3QKICAgICAgICAgIFNFTEVDVC4kc2VsZWN0ZWRfcm9vdCA9IEhlbHBlci5yZXNvbHZlKFNFTEVDVC4kc2VsZWN0ZWRfcm9vdCwgc2VsZWN0aW9uLnBhdGgsIHBhcnNlZF9vYmplY3QpOwoKICAgICAgICAgIC8vIHVwZGF0ZSBzZWxlY3RlZCBvYmplY3Qgd2l0aCB0aGUgcGFyc2VkIHJlc3VsdAogICAgICAgICAgc2VsZWN0aW9uLm9iamVjdCA9IHBhcnNlZF9vYmplY3Q7CiAgICAgICAgfSk7CiAgICAgICAgU0VMRUNULiRzZWxlY3RlZC5zb3J0KGZ1bmN0aW9uKGEsIGIpIHsKICAgICAgICAgIHJldHVybiBhLmluZGV4IC0gYi5pbmRleDsKICAgICAgICB9KTsKICAgICAgfSBlbHNlIHsKICAgICAgICB2YXIgcGFyc2VkX29iamVjdCA9IFRSQU5TRk9STS5ydW4odGVtcGxhdGUsIFNFTEVDVC4kc2VsZWN0ZWRfcm9vdCk7CiAgICAgICAgLy8gYXBwbHkgdGhlIHJlc3VsdCB0byByb290CiAgICAgICAgU0VMRUNULiRzZWxlY3RlZF9yb290ID0gSGVscGVyLnJlc29sdmUoU0VMRUNULiRzZWxlY3RlZF9yb290LCAnJywgcGFyc2VkX29iamVjdCk7CiAgICAgIH0KICAgICAgZGVsZXRlIFN0cmluZy5wcm90b3R5cGUuJHJvb3Q7CiAgICAgIGRlbGV0ZSBOdW1iZXIucHJvdG90eXBlLiRyb290OwogICAgICBkZWxldGUgRnVuY3Rpb24ucHJvdG90eXBlLiRyb290OwogICAgICBkZWxldGUgQXJyYXkucHJvdG90eXBlLiRyb290OwogICAgICBkZWxldGUgQm9vbGVhbi5wcm90b3R5cGUuJHJvb3Q7CiAgICAgIHJldHVybiBTRUxFQ1Q7CiAgICB9LAogICAgdHJhbnNmb3JtOiBmdW5jdGlvbihvYmosIHNlcmlhbGl6ZWQpIHsKICAgICAgU0VMRUNULiRwYXJzZWQgPSBbXTsKICAgICAgU0VMRUNULiRwcm9ncmVzcyA9IG51bGw7CiAgICAgIC8qCiAgICAgICdzZWxlY3RlZCcgaXMgYW4gYXJyYXkgdGhhdCBjb250YWlucyBpdGVtcyB0aGF0IGxvb2tzIGxpa2UgdGhpczoKCiAgICAgIHsKICAgICAgICBrZXk6IFRoZSBzZWxlY3RlZCBrZXksCiAgICAgICAgcGF0aDogVGhlIHBhdGggbGVhZGluZyBkb3duIHRvIHRoZSBzZWxlY3RlZCBrZXksCiAgICAgICAgb2JqZWN0OiBUaGUgZW50aXJlIG9iamVjdCB0aGF0IGNvbnRhaW5zIHRoZSBjdXJyZW50bHkgc2VsZWN0ZWQga2V5L3ZhbCBwYWlyCiAgICAgICAgdmFsdWU6IFRoZSBzZWxlY3RlZCB2YWx1ZQogICAgICB9CiAgICAgICovCiAgICAgIHZhciBkYXRhID0gb2JqOwogICAgICB0cnkgewogICAgICAgIGlmIChzZXJpYWxpemVkKSBkYXRhID0gSlNPTi5wYXJzZShvYmopOwogICAgICB9IGNhdGNoIChlcnJvcikgeyB9CgogICAgICAvLyBzaW5jZSB3ZSdyZSBhc3N1bWluZyB0aGF0IHRoZSB0ZW1wbGF0ZSBoYXMgYmVlbiBhbHJlYWR5IHNlbGVjdGVkLCB0aGUgJHRlbXBsYXRlX3Jvb3QgaXMgJHNlbGVjdGVkX3Jvb3QKICAgICAgU0VMRUNULiR0ZW1wbGF0ZV9yb290ID0gU0VMRUNULiRzZWxlY3RlZF9yb290OwoKICAgICAgU3RyaW5nLnByb3RvdHlwZS4kcm9vdCA9IGRhdGE7CiAgICAgIE51bWJlci5wcm90b3R5cGUuJHJvb3QgPSBkYXRhOwogICAgICBGdW5jdGlvbi5wcm90b3R5cGUuJHJvb3QgPSBkYXRhOwogICAgICBBcnJheS5wcm90b3R5cGUuJHJvb3QgPSBkYXRhOwogICAgICBCb29sZWFuLnByb3RvdHlwZS4kcm9vdCA9IGRhdGE7CiAgICAgIHJvb3QgPSBkYXRhOwoKICAgICAgaWYgKFNFTEVDVC4kc2VsZWN0ZWQgJiYgU0VMRUNULiRzZWxlY3RlZC5sZW5ndGggPiAwKSB7CiAgICAgICAgU0VMRUNULiRzZWxlY3RlZC5zb3J0KGZ1bmN0aW9uKGEsIGIpIHsKICAgICAgICAgIC8vIHNvcnQgYnkgcGF0aCBsZW5ndGgsIHNvIHRoYXQgZGVlcGVyIGxldmVsIGl0ZW1zIHdpbGwgYmUgcmVwbGFjZWQgZmlyc3QKICAgICAgICAgIC8vIFRPRE86IG1heSBuZWVkIHRvIGxvb2sgaW50byBlZGdlIGNhc2VzCiAgICAgICAgICByZXR1cm4gYi5wYXRoLmxlbmd0aCAtIGEucGF0aC5sZW5ndGg7CiAgICAgICAgfSkuZm9yRWFjaChmdW5jdGlvbihzZWxlY3Rpb24pIHsKICAgICAgICAgIC8vIHBhcnNlIHNlbGVjdGVkCiAgICAgICAgICB2YXIgcGFyc2VkX29iamVjdCA9IFRSQU5TRk9STS5ydW4oc2VsZWN0aW9uLm9iamVjdCwgZGF0YSk7CiAgICAgICAgICAvLyBhcHBseSB0aGUgcmVzdWx0IHRvIHJvb3QKICAgICAgICAgIFNFTEVDVC4kdGVtcGxhdGVfcm9vdCA9IEhlbHBlci5yZXNvbHZlKFNFTEVDVC4kdGVtcGxhdGVfcm9vdCwgc2VsZWN0aW9uLnBhdGgsIHBhcnNlZF9vYmplY3QpOwogICAgICAgICAgU0VMRUNULiRzZWxlY3RlZF9yb290ID0gU0VMRUNULiR0ZW1wbGF0ZV9yb290OwoKICAgICAgICAgIC8vIHVwZGF0ZSBzZWxlY3RlZCBvYmplY3Qgd2l0aCB0aGUgcGFyc2VkIHJlc3VsdAogICAgICAgICAgc2VsZWN0aW9uLm9iamVjdCA9IHBhcnNlZF9vYmplY3Q7CiAgICAgICAgfSk7CiAgICAgICAgU0VMRUNULiRzZWxlY3RlZC5zb3J0KGZ1bmN0aW9uKGEsIGIpIHsKICAgICAgICAgIHJldHVybiBhLmluZGV4IC0gYi5pbmRleDsKICAgICAgICB9KTsKICAgICAgfSBlbHNlIHsKICAgICAgICB2YXIgcGFyc2VkX29iamVjdCA9IFRSQU5TRk9STS5ydW4oU0VMRUNULiRzZWxlY3RlZF9yb290LCBkYXRhKTsKICAgICAgICAvLyBhcHBseSB0aGUgcmVzdWx0IHRvIHJvb3QKICAgICAgICBTRUxFQ1QuJHRlbXBsYXRlX3Jvb3QgPSBIZWxwZXIucmVzb2x2ZShTRUxFQ1QuJHRlbXBsYXRlX3Jvb3QsICcnLCBwYXJzZWRfb2JqZWN0KTsKICAgICAgICBTRUxFQ1QuJHNlbGVjdGVkX3Jvb3QgPSBTRUxFQ1QuJHRlbXBsYXRlX3Jvb3Q7CiAgICAgIH0KICAgICAgZGVsZXRlIFN0cmluZy5wcm90b3R5cGUuJHJvb3Q7CiAgICAgIGRlbGV0ZSBOdW1iZXIucHJvdG90eXBlLiRyb290OwogICAgICBkZWxldGUgRnVuY3Rpb24ucHJvdG90eXBlLiRyb290OwogICAgICBkZWxldGUgQXJyYXkucHJvdG90eXBlLiRyb290OwogICAgICBkZWxldGUgQm9vbGVhbi5wcm90b3R5cGUuJHJvb3Q7CiAgICAgIHJldHVybiBTRUxFQ1Q7CiAgICB9LAoKICAgIC8vIFRlcm1pbmFsIG1ldGhvZHMKICAgIG9iamVjdHM6IGZ1bmN0aW9uKCkgewogICAgICBTRUxFQ1QuJHByb2dyZXNzID0gbnVsbDsKICAgICAgaWYgKFNFTEVDVC4kc2VsZWN0ZWQpIHsKICAgICAgICByZXR1cm4gU0VMRUNULiRzZWxlY3RlZC5tYXAoZnVuY3Rpb24oaXRlbSkgeyByZXR1cm4gaXRlbS5vYmplY3Q7IH0pOwogICAgICB9IGVsc2UgewogICAgICAgIHJldHVybiBbU0VMRUNULiRzZWxlY3RlZF9yb290XTsKICAgICAgfQogICAgfSwKICAgIGtleXM6IGZ1bmN0aW9uKCkgewogICAgICBTRUxFQ1QuJHByb2dyZXNzID0gbnVsbDsKICAgICAgaWYgKFNFTEVDVC4kc2VsZWN0ZWQpIHsKICAgICAgICByZXR1cm4gU0VMRUNULiRzZWxlY3RlZC5tYXAoZnVuY3Rpb24oaXRlbSkgeyByZXR1cm4gaXRlbS5rZXk7IH0pOwogICAgICB9IGVsc2UgewogICAgICAgIGlmIChBcnJheS5pc0FycmF5KFNFTEVDVC4kc2VsZWN0ZWRfcm9vdCkpIHsKICAgICAgICAgIHJldHVybiBPYmplY3Qua2V5cyhTRUxFQ1QuJHNlbGVjdGVkX3Jvb3QpLm1hcChmdW5jdGlvbihrZXkpIHsgcmV0dXJuIHBhcnNlSW50KGtleSk7IH0pOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICByZXR1cm4gT2JqZWN0LmtleXMoU0VMRUNULiRzZWxlY3RlZF9yb290KTsKICAgICAgICB9CiAgICAgIH0KICAgIH0sCiAgICBwYXRoczogZnVuY3Rpb24oKSB7CiAgICAgIFNFTEVDVC4kcHJvZ3Jlc3MgPSBudWxsOwogICAgICBpZiAoU0VMRUNULiRzZWxlY3RlZCkgewogICAgICAgIHJldHVybiBTRUxFQ1QuJHNlbGVjdGVkLm1hcChmdW5jdGlvbihpdGVtKSB7IHJldHVybiBpdGVtLnBhdGg7IH0pOwogICAgICB9IGVsc2UgewogICAgICAgIGlmIChBcnJheS5pc0FycmF5KFNFTEVDVC4kc2VsZWN0ZWRfcm9vdCkpIHsKICAgICAgICAgIHJldHVybiBPYmplY3Qua2V5cyhTRUxFQ1QuJHNlbGVjdGVkX3Jvb3QpLm1hcChmdW5jdGlvbihpdGVtKSB7CiAgICAgICAgICAgIC8vIGtleSBpcyBpbnRlZ2VyCiAgICAgICAgICAgIHJldHVybiAnWycgKyBpdGVtICsgJ10nOwogICAgICAgICAgfSk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIHJldHVybiBPYmplY3Qua2V5cyhTRUxFQ1QuJHNlbGVjdGVkX3Jvb3QpLm1hcChmdW5jdGlvbihpdGVtKSB7CiAgICAgICAgICAgIC8vIGtleSBpcyBzdHJpbmcKICAgICAgICAgICAgcmV0dXJuICdbIicgKyBpdGVtICsgJyJdJzsKICAgICAgICAgIH0pOwogICAgICAgIH0KICAgICAgfQogICAgfSwKICAgIHZhbHVlczogZnVuY3Rpb24oKSB7CiAgICAgIFNFTEVDVC4kcHJvZ3Jlc3MgPSBudWxsOwogICAgICBpZiAoU0VMRUNULiRzZWxlY3RlZCkgewogICAgICAgIHJldHVybiBTRUxFQ1QuJHNlbGVjdGVkLm1hcChmdW5jdGlvbihpdGVtKSB7IHJldHVybiBpdGVtLnZhbHVlOyB9KTsKICAgICAgfSBlbHNlIHsKICAgICAgICByZXR1cm4gT2JqZWN0LnZhbHVlcyhTRUxFQ1QuJHNlbGVjdGVkX3Jvb3QpOwogICAgICB9CiAgICB9LAogICAgcm9vdDogZnVuY3Rpb24oKSB7CiAgICAgIFNFTEVDVC4kcHJvZ3Jlc3MgPSBudWxsOwogICAgICByZXR1cm4gU0VMRUNULiRzZWxlY3RlZF9yb290OwogICAgfSwKICB9OwoKICAvLyBOYXRpdmUgSlNPTiBvYmplY3Qgb3ZlcnJpZGUKICB2YXIgX3N0cmluZ2lmeSA9IEpTT04uc3RyaW5naWZ5OwogIEpTT04uc3RyaW5naWZ5ID0gZnVuY3Rpb24odmFsLCByZXBsYWNlciwgc3BhY2VzKSB7CiAgICB2YXIgdCA9IHR5cGVvZiB2YWw7CiAgICBpZiAoWydudW1iZXInLCAnc3RyaW5nJywgJ2Jvb2xlYW4nXS5pbmRleE9mKHQpICE9PSAtMSkgewogICAgICByZXR1cm4gX3N0cmluZ2lmeSh2YWwsIHJlcGxhY2VyLCBzcGFjZXMpOwogICAgfQogICAgaWYgKCFyZXBsYWNlcikgewogICAgICByZXR1cm4gX3N0cmluZ2lmeSh2YWwsIGZ1bmN0aW9uKGtleSwgdmFsKSB7CiAgICAgICAgaWYgKFNFTEVDVC4kaW5qZWN0ZWQgJiYgU0VMRUNULiRpbmplY3RlZC5sZW5ndGggPiAwICYmIFNFTEVDVC4kaW5qZWN0ZWQuaW5kZXhPZihrZXkpICE9PSAtMSkgeyByZXR1cm4gdW5kZWZpbmVkOyB9CiAgICAgICAgaWYgKGtleSA9PT0gJyRyb290JyB8fCBrZXkgPT09ICckaW5kZXgnKSB7CiAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkOwogICAgICAgIH0KICAgICAgICBpZiAoa2V5IGluIFRSQU5TRk9STS5tZW1vcnkpIHsKICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7CiAgICAgICAgfQogICAgICAgIGlmICh0eXBlb2YgdmFsID09PSAnZnVuY3Rpb24nKSB7CiAgICAgICAgICByZXR1cm4gJygnICsgdmFsLnRvU3RyaW5nKCkgKyAnKSc7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIHJldHVybiB2YWw7CiAgICAgICAgfQogICAgICB9LCBzcGFjZXMpOwogICAgfSBlbHNlIHsKICAgICAgcmV0dXJuIF9zdHJpbmdpZnkodmFsLCByZXBsYWNlciwgc3BhY2VzKTsKICAgIH0KICB9OwoKICAvLyBFeHBvcnQKICBpZiAodHlwZW9mIGV4cG9ydHMgIT09ICd1bmRlZmluZWQnKSB7CiAgICB2YXIgeCA9IHsKICAgICAgVFJBTlNGT1JNOiBUUkFOU0ZPUk0sCiAgICAgIHRyYW5zZm9ybTogVFJBTlNGT1JNLAogICAgICBTRUxFQ1Q6IFNFTEVDVCwKICAgICAgQ29uZGl0aW9uYWw6IENvbmRpdGlvbmFsLAogICAgICBIZWxwZXI6IEhlbHBlciwKICAgICAgaW5qZWN0OiBTRUxFQ1QuaW5qZWN0LAogICAgICBzZWxlY3Q6IFNFTEVDVC5zZWxlY3QsCiAgICAgIHRyYW5zZm9ybTogVFJBTlNGT1JNLnRyYW5zZm9ybSwKICAgIH07CiAgICBpZiAodHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcgJiYgbW9kdWxlLmV4cG9ydHMpIHsgZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0geDsgfQogICAgZXhwb3J0cyA9IHg7CiAgfSBlbHNlIHsKICAgICRjb250ZXh0LlNUID0gewogICAgICBzZWxlY3Q6IFNFTEVDVC5zZWxlY3QsCiAgICAgIGluamVjdDogU0VMRUNULmluamVjdCwKICAgICAgdHJhbnNmb3JtOiBUUkFOU0ZPUk0udHJhbnNmb3JtLAogICAgfTsKICB9Cn0oKSk7Cg==";

static const char * const kLightArtParseQueueLabel = "com.vip.lightart.doc";

void executeOnQueueSync(dispatch_queue_t queue , dispatch_block_t block)
{
    if (strcmp(dispatch_queue_get_label(DISPATCH_CURRENT_QUEUE_LABEL), dispatch_queue_get_label(queue)) == 0) {
        block();
    } else {
        dispatch_sync(queue, block);
    }
}

@implementation LightArtParser

+ (dispatch_queue_t)pareseQueue {
    static dispatch_queue_t parseQueue = nil;
    if (!parseQueue) {
        parseQueue = dispatch_queue_create(kLightArtParseQueueLabel, DISPATCH_QUEUE_SERIAL);
    }
    return parseQueue;
}

+ (JSContext *)getContext {
    JSContext *context = nil; // 有少量的Crash，原因未知，去掉static关键字试试
    if (nil == context) {
        context = [[JSContext alloc] init];
        [context evaluateScript:@"var console = {}"];
        context[@"console"][@"log"] = ^(NSString *message) {
            NSLog(@"JavaScript Log: %@", message);
        };
        context.exceptionHandler = ^(JSContext *context, JSValue *exception) {
            NSLog(@"JavaScript Exception: %@", exception);
        };
//        NSBundle *bundle = [NSBundle bundleForClass:[self class]];
//        NSURL *bundleURL = [bundle URLForResource:@"LightArt" withExtension:@"bundle"];
//        bundle = [NSBundle bundleWithURL:bundleURL];
//        NSString *path = [bundle pathForResource:@"st" ofType:@"js"];
//        NSStringEncoding encoding;
//        NSError *error = nil;
//        NSString *js = [NSString stringWithContentsOfFile:path
//                                             usedEncoding:&encoding
//                                                    error:&error];
//        js = [[js dataUsingEncoding:NSUTF8StringEncoding] base64EncodedStringWithOptions:NSDataBase64EncodingEndLineWithLineFeed];
//        NSLog(@"%@", js);
        NSData *decodedData = [[NSData alloc] initWithBase64EncodedString:stBase64Script options:NSDataBase64DecodingIgnoreUnknownCharacters];
        NSString *js = [[NSString alloc] initWithData:decodedData encoding:NSUTF8StringEncoding];
        [context evaluateScript:js];
        
        [context evaluateScript:@"function transform(template, data) {var lightArt = ST.transform(template, data); var result = {}; result.code = 0; result.lightArt = lightArt; return result;}"];
        
        [context evaluateScript:@"function update(object, path, data) {object[path] = data; return object;}"];
        
        [context evaluateScript:@"function la_pack_st_ctx(type, activity, property) {var r={}; r.type=type; r.activity=activity; r.property=property; return JSON.stringify(r);}"];
    }
    return context;
}

+ (void)asyncParseWithTemplate:(id)template data:(NSDictionary *)data block:(void(^)(id))block {
    [self asyncParseWithTemplate:template data:data args:nil cache:nil block:block];
}

+ (void)asyncParseWithTemplate:(id)template data:(NSDictionary *)data args:(id)args cache:(NSDictionary *)cache block:(void(^)(id))block {
    NSMutableDictionary *globalData = [NSMutableDictionary dictionary];
    globalData[@"$sys"] = [self sys];
    globalData[@"$screen"] = [self screen];
    if (nil != args) {
        globalData[@"$args"] = args;
    }
    if (nil != cache) {
        globalData[@"$cache"] = cache;
    }
    dispatch_async([self pareseQueue], ^{
        id result = [self parseWithTemplate:template data:data globalData:globalData];
        dispatch_async(dispatch_get_main_queue(), ^{
            if (block) {
                block(result);
            }
        });
    });
}

+ (id)syncParseWithTemplate:(id)template data:(NSDictionary *)data {
    return [self syncParseWithTemplate:template data:data args:nil cache:nil];
}

+ (id)syncParseWithTemplate:(id)template data:(NSDictionary *)data args:(id)args cache:(NSDictionary *)cache {
    NSMutableDictionary *globalData = [NSMutableDictionary dictionary];
    globalData[@"$sys"] = [self sys];
    globalData[@"$screen"] = [self screen];
    if (nil != args) {
        globalData[@"$args"] = args;
    }
    if (nil != cache) {
        globalData[@"$cache"] = cache;
    }
    __block id result = nil;
    executeOnQueueSync([self pareseQueue], ^{
        result = [self parseWithTemplate:template data:data globalData:globalData];
    });
    return result;
}

+ (NSDictionary *)sys {
    NSMutableDictionary *sys = [NSMutableDictionary dictionary];
    sys[@"platform"] = @"ios";
    sys[@"lightart_sdk_version"] = LIGHTART_SDK_VERSION;
    sys[@"lightart_version"] = LIGHTART_VERSION;
    return sys;
}

+ (NSDictionary *)screen {
    __block UIEdgeInsets safeAreaInsets = UIEdgeInsetsZero;
    if (@available(iOS 11.0, *)) {
        dispatch_queue_t queue = dispatch_get_main_queue();
        if (strcmp(dispatch_queue_get_label(DISPATCH_CURRENT_QUEUE_LABEL), dispatch_queue_get_label(queue)) == 0) {
            safeAreaInsets = [UIApplication sharedApplication].keyWindow.safeAreaInsets;
        } else {
            dispatch_sync(queue, ^{
                safeAreaInsets = [UIApplication sharedApplication].keyWindow.safeAreaInsets;
            });
        }
    }
    NSMutableDictionary *safeArea = [NSMutableDictionary dictionary];
    safeArea[@"t"] = [NSString stringWithFormat:@"%ipx", (int)(2 * safeAreaInsets.top)];
    safeArea[@"l"] = [NSString stringWithFormat:@"%ipx", (int)(2 * safeAreaInsets.left)];
    safeArea[@"b"] = [NSString stringWithFormat:@"%ipx", (int)(2 * safeAreaInsets.bottom)];
    safeArea[@"r"] = [NSString stringWithFormat:@"%ipx", (int)(2 * safeAreaInsets.right)];
    
    NSMutableDictionary *screen = [NSMutableDictionary dictionary];
    screen[@"safe_areas"] = safeArea;
    screen[@"status_bar_height"] = @"40px";
    CGSize screenBounds = [UIScreen mainScreen].bounds.size;
    screen[@"height"] = [NSString stringWithFormat:@"%.2fdip", screenBounds.height / screenBounds.width * 750];
    return screen;
}

+ (id)parseWithTemplate:(id)template data:(NSDictionary *)data globalData:(NSDictionary *)globalData {
    JSContext *context = [self getContext];
    for (NSString *key in globalData) {
        context[key] = globalData[key];
    }
    if (nil == data) {
        data = @{};
    }
    JSValue *transform = context[@"transform"];
    JSValue *value = [transform callWithArguments:@[[template copy], [data copy]]];
    NSDictionary *result = [value toDictionary];
    if (0 == [result[@"code"] intValue]) {
        id lightArt = result[@"lightArt"];
        return lightArt;
    } else {
        return nil;
    }
}

@end
